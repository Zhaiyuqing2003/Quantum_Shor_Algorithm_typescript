{"mappings":"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","sources":["../../../Users/kevin/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-browser-hmr/lib/runtime-9461fd0c5f590f0f.js","tests/SpeedComparison/index.ts","lib/QuantumGate/Atomizer.ts","lib/QuantumGate/ElementaryGate/Hadamard.ts","util/StaticImpl.ts","../../../Users/kevin/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/transformer-js/src/esmodule-helpers.js","util/StringHelper.ts","lib/QuantumGate/GateHelper.ts","lib/QuantumGate/GeneratorMatrixMap.ts","util/Matrix.ts","util/ComplexNumber.ts","util/Vector.ts","lib/QuantumGate/Generator.ts","lib/QuantumGate/ElementaryGate/PauliX.ts","lib/QuantumGate/ElementaryGate/Phase.ts","lib/QuantumGate/ElementaryGate/Rz.ts","lib/QuantumGate/ExtendedGate/Flip.ts","lib/QuantumGate/ExtendedGate/Fourier.ts","lib/QuantumGate/ExtendedGate/Swap.ts","lib/QuantumGate/GateSymbol.ts","lib/QuantumGate/QuantumGate.ts","lib/QuantumGate/GateConstructorMap.ts","lib/QuantumGate/ExtendedGate/Shor.ts","lib/QuantumState.ts","lib/QuantumVectorState.ts","lib/QuantumWire.ts","lib/QuantumCircuit.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"16512229fa23dcb8\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}","import { QuantumCircuit } from \"../../lib/QuantumCircuit\"\r\nimport { AtomizeStrategy } from \"../../lib/QuantumGate/Atomizer\";\r\nimport { GateSymbol } from \"../../lib/QuantumGate/GateSymbol\";\r\nimport { GeneratorType } from \"../../lib/QuantumGate/Generator\";\r\nimport { QuantumGate } from \"../../lib/QuantumGate/QuantumGate\";\r\nimport QuantumState from \"../../lib/QuantumState\";\r\nimport QuantumVectorState from \"../../lib/QuantumVectorState\";\r\nimport { QuantumWire } from \"../../lib/QuantumWire\";\r\nimport ComplexNumber from \"../../util/ComplexNumber\";\r\nimport Vector from \"../../util/Vector\";\r\n\r\n// @ts-ignore\r\nimport Plotly from \"plotly.js-dist\";\r\n\r\n\r\nconst generateRandomCircuit = (wireLength : number, gateNumber : number = 100) => {\r\n    // generator one of three H, CX, P\r\n    const wire = QuantumWire.create(wireLength);\r\n\r\n    for (let i = 0; i < gateNumber; i++) {\r\n        const rand = Math.random();\r\n\r\n        if (rand < 0.33) {\r\n            wire.addGate(QuantumGate.fromBasis({\r\n                type : GateSymbol.Hadamard,\r\n                wire : Math.floor(Math.random() * wireLength),\r\n                wireLength\r\n            }));\r\n        } else if (rand < 0.66) {\r\n            wire.addGate(QuantumGate.fromBasis({\r\n                type : GateSymbol.Phase,\r\n                wire : Math.floor(Math.random() * wireLength),\r\n                angle : Math.random() * Math.PI * 2,\r\n                wireLength\r\n            }))\r\n\r\n        } else {\r\n            const targetWire = Math.floor(Math.random() * wireLength);\r\n            // rand control wire !== targetWire\r\n            let controlWire = Math.floor(Math.random() * wireLength);\r\n            while (controlWire === targetWire)\r\n                controlWire = Math.floor(Math.random() * wireLength);\r\n\r\n            wire.addGate(QuantumGate.fromSingleControlled({\r\n                type : GateSymbol.PauliX,\r\n                wire : targetWire,\r\n                controlWire,\r\n                wireLength\r\n            }));\r\n        }\r\n    }\r\n\r\n    return wire;\r\n}\r\n\r\n\r\nconst testSpeed = (wireLength : number) => {\r\n    const wire = generateRandomCircuit(wireLength);\r\n\r\n    // const circuitIab = wire.generate(AtomizeStrategy.Min, GeneratorType.Matrix);\r\n    // const genStart3 = performance.now();\r\n    // const circuitIc = wire.generate(AtomizeStrategy.Min, GeneratorType.SparseMatrix);\r\n    // const genEnd3 = performance.now();\r\n    // console.log(`Ic: ${genEnd3 - genStart3} ms`);\r\n    const genStartII = performance.now();\r\n    const circuitII = wire.generate(AtomizeStrategy.Min, GeneratorType.StateFunction);\r\n    const genEndII = performance.now();\r\n    console.log(`II: ${genEndII - genStartII} ms`);\r\n\r\n    // const genStartIII = performance.now();\r\n    // const circuitIII = wire.generate(AtomizeStrategy.Min, GeneratorType.VectorFunction);\r\n    // const genEndIII = performance.now();\r\n    // console.log(`III: ${genEndIII - genStartIII} ms`);\r\n\r\n    const genStartIV = performance.now();\r\n    const circuitIV = wire.generate(AtomizeStrategy.Min, GeneratorType.VectorStateFunction);\r\n    const genEndIV = performance.now();\r\n    console.log(`IV: ${genEndIV - genStartIV} ms`);\r\n\r\n    const vec = Vector.zeros(2 ** wireLength);\r\n    vec.set(0, ComplexNumber.ONE);\r\n\r\n    // simulator Ia\r\n    // const start = performance.now();\r\n    // const _Ia = circuitIab.executeMatrix(vec);\r\n    // const end = performance.now();\r\n    // console.log(`Ia: ${end - start} ms`);\r\n    // simulator Ib\r\n    // const start2 = performance.now();\r\n    // const _Ib = circuitIab.execute(vec);\r\n    // const end2 = performance.now();\r\n    // console.log(`Ib: ${end2 - start2} ms`);\r\n    // simulator Ic\r\n    // const start3 = performance.now();\r\n    // circuitIc.execute(vec);\r\n    // const end3 = performance.now();\r\n    // console.log(`Ic: ${end3 - start3} ms`);\r\n    // simulator II\r\n    const start4 = performance.now();\r\n    circuitII.execute(QuantumState.zero(wireLength));\r\n    const end4 = performance.now();\r\n    console.log(`II: ${end4 - start4} ms`);\r\n    // simulator III\r\n    // const start5 = performance.now();\r\n    // circuitIII.execute(vec);\r\n    // const end5 = performance.now();\r\n    // console.log(`III: ${end5 - start5} ms`);\r\n    // simulator IV\r\n    const start6 = performance.now();\r\n    circuitIV.execute(QuantumVectorState.zero(wireLength));\r\n    const end6 = performance.now();\r\n    console.log(`IV: ${end6 - start6} ms`);\r\n    \r\n}\r\n\r\nconst testStateFunctionSparse = () => {\r\n    return new Promise((resolve) => {\r\n        const circuitIIData : number[][] = [];\r\n        const circuitIVData : number[][] = [];\r\n\r\n        const startLength = 3;\r\n        const endLength = 10;\r\n\r\n        const iterations = 100\r\n\r\n        let currentLength = startLength;\r\n        let currentIteration = 0;\r\n\r\n        const iter = () => {\r\n            if (currentLength >= endLength && currentIteration >= iterations) {\r\n                resolve({\r\n                    circuitIIData,\r\n                    circuitIVData\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (currentLength < endLength && currentIteration >= iterations) {\r\n                currentLength++;\r\n                currentIteration = 0;\r\n            }\r\n\r\n            if (circuitIIData[currentLength] === undefined) {\r\n                circuitIIData[currentLength] = [];\r\n            }\r\n\r\n            if (circuitIVData[currentLength] === undefined) {\r\n                circuitIVData[currentLength] = [];\r\n            }\r\n\r\n            const wire = generateRandomCircuit(currentLength);\r\n    \r\n            const circuitII = wire.generate(AtomizeStrategy.Min, GeneratorType.StateFunction);    \r\n            const circuitIV = wire.generate(AtomizeStrategy.Min, GeneratorType.VectorStateFunction);\r\n    \r\n\r\n            const startII = performance.now();\r\n            circuitII.execute(QuantumState.zero(currentLength));\r\n            const endII = performance.now();\r\n\r\n            circuitIIData[currentLength].push(endII - startII);\r\n\r\n            const startIV = performance.now();\r\n            circuitIV.execute(QuantumVectorState.zero(currentLength));\r\n            const endIV = performance.now();\r\n\r\n            circuitIVData[currentLength].push(endIV - startIV);\r\n\r\n            console.log(`${currentLength}: ${currentIteration}`);\r\n            currentIteration++;\r\n\r\n            setTimeout(iter, 0);\r\n        }\r\n\r\n        setTimeout(iter, 0);\r\n    }) as Promise<{\r\n        circuitIIData : number[][],\r\n        circuitIVData : number[][]\r\n    }>;\r\n}\r\n\r\n// console.log(\"1\")\r\n\r\n// for (let index in circuitIIData) {\r\n//     Promise.all(circuitIIData[index]).then(values => {\r\n//         console.log(`II at ${index} wire: ${values.reduce((a, b) => a + b) / values.length} ms`);\r\n//     })\r\n// }\r\n\r\n// for (let index in circuitIVData) {\r\n//     Promise.all(circuitIVData[index]).then(values => {\r\n//         console.log(`IV at ${index} wire: ${values.reduce((a, b) => a + b) / values.length} ms`);\r\n//     })\r\n// }\r\n\r\nwindow.onload = () => {\r\n    testStateFunctionSparse().then(({ circuitIIData, circuitIVData }) => {\r\n        const avgIIData = circuitIIData.map(arr => arr?.reduce((a, b) => a + b) / arr.length);\r\n        const avgIVData = circuitIVData.map(arr => arr?.reduce((a, b) => a + b) / arr.length);\r\n\r\n        console.log(avgIIData);\r\n        console.log(avgIVData);        \r\n    });\r\n}","import Hadamard from \"./ElementaryGate/Hadamard\";\r\nimport PauliX from \"./ElementaryGate/PauliX\";\r\nimport Phase from \"./ElementaryGate/Phase\";\r\nimport Rz from \"./ElementaryGate/Rz\";\r\nimport Flip from \"./ExtendedGate/Flip\";\r\nimport Fourier from \"./ExtendedGate/Fourier\";\r\nimport Swap from \"./ExtendedGate/Swap\";\r\nimport { GateSymbol } from \"./GateSymbol\";\r\nimport { GateEnum } from \"./GateType\";\r\nimport { GeneratorType } from \"./Generator\";\r\nimport { QuantumGate } from \"./QuantumGate\";\r\nimport { Controlled, Inverted, InvertedUncontrolledBasedOn, NotInverted, NotInvertedSinglyControlledBasedOn, NotInvertedUncontrolledBasedOn, SinglyControlled, Uncontrolled } from \"./QuantumGateType\";\r\n\r\nexport type AtomizeType = \r\n    typeof AtomizeStrategy.All |\r\n    typeof AtomizeStrategy.Max |\r\n    typeof AtomizeStrategy.Min |\r\n    typeof AtomizeStrategy.None\r\n\r\n\r\n\r\nexport class AtomizeStrategy {\r\n    private constructor() {};\r\n\r\n    static All(gate : QuantumGate, generatorType : GeneratorType) : QuantumGate[] {\r\n        if (gate.isElementaryGate()) {\r\n            return [gate];\r\n        }\r\n        // non-elementary gate can be atomized\r\n        const atomizedGateList = Atomizer.atomize(gate)\r\n\r\n        if (atomizedGateList === null) {\r\n            throw new Error(`Could not atomize gate ${gate.constructor.name}`);\r\n        }\r\n\r\n        // further atomize the list\r\n        return atomizedGateList.map(g => this.All(g, generatorType)).flat();\r\n    }\r\n    static Max(gate : QuantumGate, generatorType : GeneratorType) : QuantumGate[] {\r\n        if (gate.isElementaryGate()) {\r\n            return [gate];\r\n        }\r\n\r\n        // try to atomize the gate\r\n        const atomizedGateList = Atomizer.atomize(gate)\r\n\r\n        if (atomizedGateList !== null) {\r\n            // further atomize the list\r\n            return atomizedGateList.map(g => this.Max(g, generatorType)).flat();\r\n        }\r\n\r\n        // cannot atomize the gate, try to get it\r\n        if (gate.isGettable(generatorType)) {\r\n            return [gate];\r\n        }\r\n\r\n        throw new Error(`Could neither atomize gate ${gate.constructor.name} with generator ${generatorType} nor get it`);\r\n    }\r\n    static Min(gate : QuantumGate, generatorType : GeneratorType) : QuantumGate[] {\r\n        if (gate.isElementaryGate()) {\r\n            return [gate];\r\n        }\r\n\r\n        // try to get it\r\n        if (gate.isGettable(generatorType)) {\r\n            return [gate];\r\n        }\r\n        // cannot directly get the gate, try to atomize it\r\n        const atomizedGateList = Atomizer.atomize(gate)\r\n\r\n        if (atomizedGateList === null) {\r\n            throw new Error(`Could not atomize gate ${gate.constructor.name}`);\r\n        }\r\n\r\n        // further atomize the list\r\n        return atomizedGateList.map(g => this.Min(g, generatorType)).flat();;\r\n    }\r\n    static None(gate : QuantumGate, generatorType : GeneratorType) : QuantumGate[] {\r\n        if (gate.isGettable(generatorType)) {\r\n            return [gate];\r\n        } else {\r\n            throw new Error(`Could not get gate ${gate.constructor.name} with generator ${generatorType}`);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Atomizer {\r\n    private constructor() {};\r\n\r\n    // 1 depth atomization\r\n    static atomize(gate : QuantumGate) : QuantumGate[] | null {\r\n        if (gate.isNotInverted()) {\r\n            if (gate.isUncontrolled()) {\r\n                return this.atomizeNotInvertedUncontrolled(gate);\r\n            } else if (gate.isSinglyControlled()) {\r\n                return this.atomizeNotInvertedSinglyControlled(gate);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else if (gate.isInverted()) {\r\n            if (gate.isUncontrolled()) {\r\n                return this.atomizeInvertedUncontrolled(gate);\r\n            } else if (gate.isControlled()) {\r\n                return this.atomizeInvertedControlled(gate);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static atomizeNotInvertedUncontrolled(gate : QuantumGate & NotInverted & Uncontrolled) : QuantumGate[] | null {\r\n        if (gate.isBasedOn(Hadamard)) {\r\n            return this.NotInvertedUncontrolledHadamard(gate);\r\n        } else if (gate.isBasedOn(PauliX)) {\r\n            return this.NotInvertedUncontrolledPauliX(gate);\r\n        } else if (gate.isBasedOn(Phase)) {\r\n            return this.NotInvertedUncontrolledPhase(gate);\r\n        } else if (gate.isBasedOn(Rz)) {\r\n            return this.NotInvertedUncontrolledRz(gate);\r\n        } else if (gate.isBasedOn(Flip)) {\r\n            return this.NotInvertedUncontrolledFlip(gate);\r\n        } else if (gate.isBasedOn(Fourier)) {\r\n            return this.NotInvertedUncontrolledFourier(gate);\r\n        } else if (gate.isBasedOn(Swap)) {\r\n            return this.NotInvertedUncontrolledSwap(gate);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    static atomizeNotInvertedSinglyControlled(gate : QuantumGate & NotInverted & SinglyControlled) : QuantumGate[] | null {\r\n        if (gate.isBasedOn(PauliX)) {\r\n            return this.NotInvertedSinglyControlledPauliX(gate);\r\n        } else if (gate.isBasedOn(Phase)) {\r\n            return this.NotInvertedSinglyControlledPhase(gate);\r\n        } else if (gate.isBasedOn(Rz)) {\r\n            return this.NotInvertedSinglyControlledRz(gate);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    static atomizeInvertedUncontrolled(gate : QuantumGate & Inverted & Uncontrolled) : QuantumGate[] | null {\r\n        if (gate.isBasedOn(Hadamard)) {\r\n            return this.InvertedUncontrolledHadamard(gate);\r\n        } else if (gate.isBasedOn(PauliX)) {\r\n            return this.InvertedUncontrolledPauliX(gate);\r\n        } else if (gate.isBasedOn(Phase)) {\r\n            return this.InvertedUncontrolledPhase(gate);\r\n        } else if (gate.isBasedOn(Rz)) {\r\n            return this.InvertedUncontrolledRz(gate);\r\n        } else if (gate.isBasedOn(Flip)) {\r\n            return this.InvertedUncontrolledFlip(gate);\r\n        } else if (gate.isBasedOn(Fourier)) {\r\n            return this.InvertedUncontrolledFourier(gate);\r\n        } else if (gate.isBasedOn(Swap)) {\r\n            return this.InvertedUncontrolledSwap(gate);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    static atomizeInvertedControlled(gate : QuantumGate & Inverted & Controlled) : QuantumGate[] | null {\r\n        // construct the uncontrolled version first\r\n        const uncontrolledGate = this.atomizeInvertedUncontrolled(QuantumGate.toUncontrolled(gate));\r\n\r\n        if (uncontrolledGate === null) {\r\n            return null;\r\n        }\r\n\r\n        // then construct the controlled version\r\n        return uncontrolledGate.map((uncontrolledGate) => {\r\n            return QuantumGate.toControlled(uncontrolledGate, gate.controlWire);\r\n        })\r\n    }\r\n\r\n\r\n\r\n    static NotInvertedUncontrolledHadamard = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"Hadamard\"]>) => [gate.clone()];\r\n    static NotInvertedUncontrolledPhase = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"Phase\"]>) => [gate.clone()];\r\n    static NotInvertedUncontrolledPauliX = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"PauliX\"]>) => {\r\n        // H, P Pi, H\r\n        return [\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Hadamard,\r\n                wire: gate.basis.wire,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Phase,\r\n                wire: gate.basis.wire,\r\n                angle : Math.PI,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Hadamard,\r\n                wire: gate.basis.wire,\r\n                wireLength : gate.wireLength\r\n            })\r\n        ]\r\n    }\r\n    static NotInvertedUncontrolledRz = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"Rz\"]>) => {\r\n        // PauliX Phase -theta/2 PauliX Phase theta/2\r\n        return [\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wire,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Phase,\r\n                wire: gate.basis.wire,\r\n                angle : -gate.basis.angle / 2,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wire,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Phase,\r\n                wire: gate.basis.wire,\r\n                angle : gate.basis.angle / 2,\r\n                wireLength : gate.wireLength\r\n            })\r\n        ]\r\n    }\r\n    static NotInvertedUncontrolledFlip = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"Flip\"]>) => {\r\n        const [startWire, endWire] = gate.basis.wireRange;\r\n        const middleWire = Math.floor((startWire + endWire) / 2);\r\n        \r\n        \r\n        let returnArray : QuantumGate[] = [];\r\n        \r\n        for (let i = startWire; i < middleWire; i++) {\r\n            returnArray.push(QuantumGate.fromBasis({\r\n                type : GateSymbol.Swap,\r\n                wireOne : i,\r\n                wireTwo : endWire - 1 + startWire - i,\r\n                wireLength : gate.wireLength\r\n            }));\r\n        }\r\n        \r\n        return returnArray;\r\n    }\r\n    static NotInvertedUncontrolledFourier = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"Fourier\"]>) => {\r\n        let returnArray : QuantumGate[] = [];\r\n        \r\n        const basis = gate.basis;\r\n        const startWire = basis.startWire;\r\n        const wireLength = basis.wireLength;\r\n        const endWire = basis.endWire;\r\n        \r\n        for (let i = endWire - 1; i >= startWire; i --) {\r\n            for (let j = endWire - 1; j > 1; j --) {\r\n                returnArray.push(QuantumGate.fromBasis({\r\n                    type : GateSymbol.Phase,\r\n                    wireLength,\r\n                    wire : j,\r\n                    angle : Math.PI / (2 ** (j - 1))\r\n                }))\r\n            }\r\n\r\n            returnArray.push(QuantumGate.fromBasis({\r\n                type : GateSymbol.Hadamard,\r\n                wireLength,\r\n                wire : i\r\n            }))\r\n        }\r\n        \r\n        returnArray.push(QuantumGate.fromBasis({\r\n            type : GateSymbol.Flip,\r\n            wireLength,\r\n            startWire : startWire,\r\n            endWire : endWire\r\n        }))\r\n    \r\n        return returnArray;\r\n    }\r\n    static NotInvertedUncontrolledSwap = (gate : QuantumGate & NotInvertedUncontrolledBasedOn<GateEnum[\"Swap\"]>) => {\r\n        // C-NOT, C-NOT, C-NOT,\r\n        return [\r\n            QuantumGate.fromSingleControlled({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wireOne,\r\n                controlWire: gate.basis.wireTwo,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromSingleControlled({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wireTwo,\r\n                controlWire: gate.basis.wireOne,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromSingleControlled({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wireOne,\r\n                controlWire: gate.basis.wireTwo,\r\n                wireLength : gate.wireLength\r\n            })\r\n        ]\r\n    }\r\n    \r\n    static NotInvertedSinglyControlledPauliX = (gate : QuantumGate & NotInvertedSinglyControlledBasedOn<GateEnum[\"PauliX\"]>) => [gate.clone()];\r\n    static NotInvertedSinglyControlledRz = (gate : QuantumGate & NotInvertedSinglyControlledBasedOn<GateEnum[\"Rz\"]>) => {\r\n        // C-PauliX Phase -theta/2 C-PauliX Phase theta/2\r\n        return [\r\n            QuantumGate.fromSingleControlled({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wire,\r\n                controlWire: gate.controlWire[0],\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Phase,\r\n                wire: gate.basis.wire,\r\n                angle : -gate.basis.angle / 2,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromSingleControlled({\r\n                type: GateSymbol.PauliX,\r\n                wire: gate.basis.wire,\r\n                controlWire: gate.controlWire[0],\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Phase,\r\n                wire: gate.basis.wire,\r\n                angle : gate.basis.angle / 2,\r\n                wireLength : gate.wireLength\r\n            })\r\n        ]\r\n    }\r\n    static NotInvertedSinglyControlledPhase = (gate : QuantumGate & NotInvertedSinglyControlledBasedOn<GateEnum[\"Phase\"]>) => {\r\n        // Phase theta / 2 C-Rz\r\n        return [\r\n            QuantumGate.fromBasis({\r\n                type: GateSymbol.Phase,\r\n                wire: gate.controlWire[0],\r\n                angle : gate.basis.angle / 2,\r\n                wireLength : gate.wireLength\r\n            }),\r\n            QuantumGate.fromSingleControlled({\r\n                type: GateSymbol.Rz,\r\n                wire: gate.basis.wire,\r\n                controlWire: gate.controlWire[0],\r\n                angle : gate.basis.angle,\r\n                wireLength : gate.wireLength\r\n            })\r\n        ]\r\n    }\r\n\r\n\r\n\r\n    static InvertedUncontrolledHadamard = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"Hadamard\"]>) => [gate.clone()];\r\n    static InvertedUncontrolledPauliX = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"PauliX\"]>) => [gate.clone()];\r\n    static InvertedUncontrolledPhase = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"Phase\"]>) => \r\n        [QuantumGate.fromBasis({\r\n            type : GateSymbol.Phase,\r\n            wire : gate.basis.wire,\r\n            angle : -gate.basis.angle,\r\n            wireLength : gate.wireLength\r\n        })]\r\n    static InvertedUncontrolledRz = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"Rz\"]>) =>\r\n        [QuantumGate.fromBasis({\r\n            type : GateSymbol.Rz,\r\n            wire : gate.basis.wire,\r\n            angle : -gate.basis.angle,\r\n            wireLength : gate.wireLength\r\n        })]\r\n    static InvertedUncontrolledFlip = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"Flip\"]>) => [gate.clone()];\r\n    static InvertedUncontrolledSwap = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"Swap\"]>) => [gate.clone()];\r\n    static InvertedUncontrolledFourier = (gate : QuantumGate & InvertedUncontrolledBasedOn<GateEnum[\"Fourier\"]>) => {\r\n        return this.NotInvertedUncontrolledFourier(QuantumGate.fromBasis({\r\n            type : GateSymbol.Fourier,\r\n            wireLength : gate.wireLength,\r\n            startWire : gate.basis.startWire,\r\n            endWire : gate.basis.endWire\r\n        })).reverse();\r\n    }\r\n}","import Vector from \"../../../util/Vector\";\r\nimport StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport QuantumVectorState from \"../../QuantumVectorState\";\r\nimport { replaceCharAt } from \"../../../util/StringHelper\";\r\nimport { GeneratorMatrixFunctionSubType, GeneratorType } from \"../Generator\";\r\nimport { GateGettable, GateConstructor, Gate } from \"../GateInterface\";\r\nimport { Matrix, SparseMatrix } from \"../../../util/Matrix\";\r\nimport { requireLengthMatched, requireWireInBound } from \"../GateHelper\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\nimport { GeneratorMatrixMap } from \"../GeneratorMatrixMap\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Hadamard\"]>>()\r\nexport default class Hadamard implements GateGettable<GateEnum[\"Hadamard\"]> {\r\n    readonly wireLength: number;\r\n    readonly wire : number;\r\n    \r\n    constructor({ wireLength, wire } : GateConstructorParameter<GateEnum[\"Hadamard\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.wire = wire;\r\n    }\r\n\r\n    static create = ({ wireLength, wire } : GateConstructorParameter<GateEnum[\"Hadamard\"]>) => {\r\n        requireWireInBound(wireLength, wire);\r\n\r\n        return new Hadamard({ wireLength, wire });\r\n    }\r\n\r\n    get wireRange() : [number, number] {\r\n        return [this.wire, this.wire + 1];\r\n    }\r\n\r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return Hadamard.create({\r\n            wireLength,\r\n            wire: this.wire + shift\r\n        })\r\n    }\r\n    \r\n    clone() {\r\n        return new Hadamard(this);\r\n    }\r\n    \r\n    transform(callbackFn : GateParameterTransformFunction<GateEnum[\"Hadamard\"]>) {\r\n        return Hadamard.create(callbackFn(this))\r\n    }\r\n    \r\n    getBaseMatrix<G extends GeneratorMatrixFunctionSubType>(generatorType: G) {\r\n        return (GeneratorMatrixMap[generatorType]).fromNumberArray([\r\n            [1 / Math.sqrt(2) , 1 / Math.sqrt(2)],\r\n            [1 / Math.sqrt(2), -1 / Math.sqrt(2)]\r\n        ])\r\n    }\r\n\r\n    getStringStateFunction() {\r\n        return (state : QuantumState) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            return state.transform((value, key, _, newState) => {\r\n                newState.increment(\r\n                    replaceCharAt(key, this.wire, '0'), \r\n                    value.divideReal(Math.sqrt(2))\r\n                );\r\n                newState.increment(\r\n                    replaceCharAt(key, this.wire, '1'),\r\n                    value.divideReal(key[this.wire] === '0' ? Math.sqrt(2) : -Math.sqrt(2))\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        return <T extends QuantumVectorState | Vector>(state : T) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n            const signatureNumber = 1 << (this.wireLength - 1 - this.wire);\r\n\r\n            return state.transform((value, index, _, newState) => {\r\n                newState.increment(\r\n                    index & ~signatureNumber,\r\n                    value.divideReal(Math.sqrt(2))\r\n                );\r\n                newState.increment(\r\n                    index | signatureNumber, \r\n                    (index & signatureNumber) === 0 ? value.divideReal(Math.sqrt(2)) : value.divideReal(-Math.sqrt(2))\r\n                )\r\n            }) as T\r\n        }\r\n    }\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire !== this.wire;\r\n    }\r\n\r\n    isGettable<G extends GeneratorType>(_: G) : true {\r\n        return true\r\n    }\r\n}\r\n","export default <T>() => {\r\n    return <U extends T>(constructor: U) => {constructor};\r\n}\r\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","export const toBinaryString = (number : number, bitLength : number) : string => {\r\n    let result = \"\";\r\n    while(number >= 1){\r\n        result = number % 2 + result;\r\n        number >>= 1;\r\n    }\r\n    return result.padStart(bitLength, '0');\r\n}\r\n\r\nexport const toBinaryList = (string: string) : string[] => {\r\n    return string.split('');\r\n}\r\n\r\nexport const toDecimal = (binaryString : string) : number => {\r\n    let result = 0;\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n        const number = binaryString[i] === '1' ? 1 : 0;\r\n        result += number * (2 ** (binaryString.length - i - 1));\r\n    }\r\n    return result;\r\n}\r\n\r\n// char helper function\r\n\r\nexport const replaceCharAt = (string : string, index : number, replacement : string) : string => {\r\n    const array = string.split('');\r\n    array[index] = replacement;\r\n    return array.join('');\r\n}\r\n\r\nexport const swapCharAt = (string : string, indexOne : number, indexTwo : number) : string => {\r\n    const array = string.split('');\r\n    [array[indexOne], array[indexTwo]] = [array[indexTwo], array[indexOne]];\r\n    return array.join('');\r\n}\r\n\r\nexport const replaceCharBetween = (string: string, start : number, end : number, replacement : string) : string => {\r\n    if (replacement.length !== end - start) {\r\n        throw new Error('Replacement string must be the same length as the range');\r\n    }\r\n\r\n    const array = string.split('');\r\n    array.splice(start, end - start, replacement);\r\n    return array.join('');\r\n}\r\n\r\nexport const reverseString = (char : string) : string => {\r\n    return char.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nexport const everyChar = (string : string, predicate : (char : string, index : number) => boolean) : boolean => {\r\n    return string.split('').every(predicate);\r\n}","import Vector from \"../../util/Vector\";\r\nimport QuantumState from \"../QuantumState\";\r\nimport QuantumVectorState from \"../QuantumVectorState\";\r\n\r\nexport const requireLengthMatched = (stateOrVector : QuantumState | QuantumVectorState | Vector, wireLength : number) => {\r\n    if (!stateOrVector.isFitLength(wireLength)) {\r\n        throw new Error(`Quantum state or vector is not fit length.`);\r\n    }\r\n}\r\nexport const requireWireInBound = (wireLength : number, wire : number) => {\r\n    if (wire < 0 || wire >= wireLength) {\r\n        throw new Error(`Wire number is out of bound.`);\r\n    }\r\n}\r\nexport const requireWireIsNotEqual = (wireOne : number, wireTwo : number) => {\r\n    if (wireOne === wireTwo) {\r\n        throw new Error(`wire ${wireOne} is equal to wire ${wireTwo}`);\r\n    }\r\n}\r\nexport const requireWireIsSmallerThan = (wireOne : number, wireTwo : number) : void => {\r\n    if (wireOne >= wireTwo) {\r\n        throw new Error(`wire ${wireOne} is not smaller than wire ${wireTwo}`);\r\n    }\r\n}","import { IBasicMatrixStatic, Matrix, SparseMatrix } from \"../../util/Matrix\";\r\nimport { GeneratorMatrixFunctionSubType, GeneratorMatrixType, GeneratorType } from \"./Generator\";\r\n\r\nexport const GeneratorMatrixMap = {\r\n    [GeneratorType.Matrix] : Matrix,\r\n    [GeneratorType.SparseMatrix] : SparseMatrix,\r\n}\r\n\r\nexport const GeneratorMatrixCtor = <T extends GeneratorMatrixFunctionSubType>(generatorType : T) : IBasicMatrixStatic<GeneratorMatrixType<T>> => {\r\n    return GeneratorMatrixMap[generatorType];\r\n}\r\n\r\nexport const isGeneratorMatrixFunctionSubType = (generatorType : GeneratorType) : generatorType is GeneratorMatrixFunctionSubType => {\r\n    return generatorType === GeneratorType.Matrix || generatorType === GeneratorType.SparseMatrix;\r\n}","import ComplexNumber from \"./ComplexNumber\";\r\nimport StaticImpl from \"./StaticImpl\";\r\nimport Vector from \"./Vector\";\r\n\r\nexport enum MatrixType {\r\n    Dense, Sparse\r\n}\r\n\r\n\r\nexport interface IBasicMatrix<T extends MatrixType> {\r\n    rowCount : number;\r\n    columnCount : number;\r\n    get(row : number, column : number) : ComplexNumber;\r\n    transpose() : IBasicMatrix<T>;\r\n    matrixMultiply(other : IBasicMatrix<T>) : IBasicMatrix<T>;\r\n    vectorMultiply(vector : Vector) : Vector;\r\n    kroneckerProduct(other : IBasicMatrix<T>) : IBasicMatrix<T>;\r\n}\r\n\r\nexport interface IBasicMatrixStatic<T extends MatrixType> {\r\n    fromNumberArray(array : number[][]) : IBasicMatrix<T>;\r\n    fromComplexArray(array : ComplexNumber[][]) : IBasicMatrix<T>;\r\n    fromArray(array : (number | ComplexNumber)[][]) : IBasicMatrix<T>;\r\n    // zeros(rowCount : number, columnCount : number) : IBasicMatrix<T>;\r\n    // ones(rowCount : number, columnCount : number) : IBasicMatrix<T>;\r\n    identity(size: number) : IBasicMatrix<T>;\r\n    zeros(rowCount: number, columnCount : number) : IBasicMatrix<T>;\r\n    concat(A : IBasicMatrix<T>, B : IBasicMatrix<T>, C : IBasicMatrix<T>, D : IBasicMatrix<T>) : IBasicMatrix<T>;\r\n    interleave(A : IBasicMatrix<T>, B : IBasicMatrix<T>) : IBasicMatrix<T>;\r\n}\r\n\r\n@StaticImpl<IBasicMatrixStatic<MatrixType.Dense>>()\r\nexport class Matrix implements IBasicMatrix<MatrixType.Dense> {\r\n    private _matrix : ComplexNumber[][];\r\n    private constructor(matrix : ComplexNumber[][]) {\r\n        this._matrix = matrix;\r\n    }\r\n\r\n    // ctor functions\r\n    static fromNumberArray(array : number[][]) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n        for (const row of array) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (const element of row) {\r\n                rowArray.push(ComplexNumber.fromReal(element));\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n        return new Matrix(result);   \r\n    }\r\n\r\n    static fromComplexArray(array : ComplexNumber[][]) : Matrix {\r\n        return new Matrix(array);\r\n    }\r\n\r\n    static fromArray(array : (number | ComplexNumber)[][]) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n        for (const row of array) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (const element of row) {\r\n                typeof element === 'number' \r\n                    ? rowArray.push(ComplexNumber.fromReal(element)) \r\n                    : rowArray.push(element);\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n        return new Matrix(result);\r\n    }\r\n\r\n    static identity(size : number) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n        for (let i = 0; i < size; i++) {\r\n            const row : ComplexNumber[] = [];\r\n            for (let j = 0; j < size; j++) {\r\n                row.push(i === j ? ComplexNumber.ONE : ComplexNumber.ZERO);\r\n            }\r\n            result.push(row);\r\n        }\r\n        return new Matrix(result);\r\n    }\r\n\r\n    static zeros(rowCount : number, columnCount : number) {\r\n        const result : ComplexNumber[][] = [];\r\n        for (let i = 0; i < rowCount; i++) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < columnCount; j++) {\r\n                rowArray.push(ComplexNumber.ZERO);\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n        return new Matrix(result);\r\n    }\r\n\r\n    static concat(A : Matrix, B : Matrix, C : Matrix, D : Matrix) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n\r\n        // check dimensions\r\n        if (\r\n            A.rowCount !== B.rowCount ||\r\n            C.rowCount !== D.rowCount ||\r\n            A.columnCount !== C.columnCount ||\r\n            B.columnCount !== D.columnCount\r\n        ) {\r\n            throw new Error('Matrix dimensions do not match');\r\n        }\r\n\r\n        for (let i = 0; i < A.rowCount; i++) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < A.columnCount; j++) {\r\n                rowArray.push(A._matrix[i][j].clone());\r\n            }\r\n            for (let j = 0; j < B.columnCount; j++) {\r\n                rowArray.push(B._matrix[i][j].clone());\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n\r\n        for (let i = 0; i < C.rowCount; i++) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < C.columnCount; j++) {\r\n                rowArray.push(C._matrix[i][j].clone());\r\n            }\r\n            for (let j = 0; j < D.columnCount; j++) {\r\n                rowArray.push(D._matrix[i][j].clone());\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n\r\n        return new Matrix(result);\r\n    }\r\n\r\n    static interleave(A : Matrix, B : Matrix) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n\r\n        // check dimensions\r\n        if (\r\n            A.rowCount !== B.rowCount || \r\n            A.columnCount !== B.columnCount ||\r\n            A.columnCount !== A.rowCount ||\r\n            B.columnCount !== B.rowCount\r\n        ) {\r\n            throw new Error('Matrix dimensions do not match');\r\n        }\r\n\r\n        for (let i = 0; i < A.rowCount; i++) {\r\n            const rowAArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < A.columnCount; j++) {\r\n                rowAArray.push(A._matrix[i][j].clone());\r\n                rowAArray.push(ComplexNumber.ZERO);\r\n            }\r\n            result.push(rowAArray);\r\n\r\n            const rowBArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < B.columnCount; j++) {\r\n                rowBArray.push(ComplexNumber.ZERO);\r\n                rowBArray.push(B._matrix[i][j].clone());\r\n            }\r\n            result.push(rowBArray);\r\n        }\r\n\r\n        return new Matrix(result);\r\n    }\r\n\r\n    // property access\r\n\r\n    get rowCount() : number {\r\n        return this._matrix.length;\r\n    }\r\n\r\n    get columnCount() : number {\r\n        return this._matrix[0].length;\r\n    }\r\n\r\n    get rawArray() : ComplexNumber[][] {\r\n        return this._matrix;\r\n    }\r\n\r\n    get(i: number, j: number) {\r\n        return this._matrix[i][j];\r\n    }\r\n\r\n    transpose() {\r\n        const result : ComplexNumber[][] = [];\r\n        for (let i = 0; i < this.columnCount; i++) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < this.rowCount; j++) {\r\n                rowArray.push(this._matrix[j][i]);\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n        return new Matrix(result);\r\n    }\r\n\r\n    matrixMultiply(other : Matrix) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n\r\n        if (this.columnCount !== other.rowCount) {\r\n            throw new Error('Matrix dimensions do not match');\r\n        }\r\n\r\n        for (let i = 0; i < this.rowCount; i++) {\r\n            const rowArray : ComplexNumber[] = [];\r\n            for (let j = 0; j < other.columnCount; j++) {\r\n                let sum : ComplexNumber = ComplexNumber.ZERO;\r\n                for (let k = 0; k < this.columnCount; k++) {\r\n                    sum = sum.add(this._matrix[i][k].multiply(other._matrix[k][j]));\r\n                }\r\n                rowArray.push(sum);\r\n            }\r\n            result.push(rowArray);\r\n        }\r\n\r\n        return new Matrix(result);\r\n    }\r\n\r\n    vectorMultiply(vector : Vector) : Vector {\r\n        if (this.columnCount !== vector.length) {\r\n            throw new Error('Matrix dimensions do not match');\r\n        }\r\n\r\n        const result : ComplexNumber[] = [];\r\n        for (let i = 0; i < this.rowCount; i++) {\r\n            let sum : ComplexNumber = ComplexNumber.ZERO;\r\n            for (let j = 0; j < this.columnCount; j++) {\r\n                sum = sum.add(this._matrix[i][j].multiply(vector.get(j)));\r\n            }\r\n            result.push(sum);\r\n        }\r\n        return Vector.fromComplexArray(result);\r\n    }\r\n\r\n    kroneckerProduct(other : Matrix) : Matrix {\r\n        const result : ComplexNumber[][] = [];\r\n        for (let i = 0; i < this.rowCount; i++) {\r\n            for (let j = 0; j < this.columnCount; j++) {\r\n                // iterate over the other matrix\r\n                for (let k = 0; k < other.rowCount; k++) {\r\n                    for (let l = 0; l < other.columnCount; l++) {\r\n                        if (result[i * other.rowCount + k] === undefined) {\r\n                            result[i * other.rowCount + k] = [];\r\n                        }\r\n                        result[i * other.rowCount + k][j * other.columnCount + l] \r\n                            = this._matrix[i][j].multiply(other._matrix[k][l]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Matrix(result);\r\n    }\r\n\r\n    toString() {\r\n        let result : string = '';\r\n        for (let i = 0; i < this.rowCount; i++) {\r\n            for (let j = 0; j < this.columnCount; j++) {\r\n                result += this._matrix[i][j].toString() + ' ';\r\n            }\r\n            result += ' \\n ';\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// use csr format\r\n@StaticImpl<IBasicMatrixStatic<MatrixType.Sparse>>()\r\nexport class SparseMatrix implements IBasicMatrix<MatrixType.Sparse> {\r\n    private _rowCount : number;\r\n    private _columnCount : number;\r\n    private _value : ComplexNumber[];\r\n    private _colIndexList : number[];\r\n    private _rowPtrList : number[];\r\n\r\n\r\n    private constructor(rowCount : number, columnCount: number, value : ComplexNumber[], colIndexList : number[], rowPtrList : number[]) {\r\n        this._rowCount = rowCount;\r\n        this._columnCount = columnCount;\r\n        this._value = value;\r\n        this._colIndexList = colIndexList;\r\n        this._rowPtrList = rowPtrList;\r\n    }\r\n\r\n    static fromNumberArray(array : number[][] = [[]]) : SparseMatrix {\r\n        const value : ComplexNumber[] = [];\r\n        const colIndexList : number[] = [];\r\n        const rowPtrList : number[] = [0];\r\n\r\n        const rowCount = array.length;\r\n        const columnCount = array[0].length;\r\n\r\n        let elementCount = 0;\r\n        for (const row of array) {\r\n            for (const [colIndex, val] of row.entries()) {\r\n                if (val !== 0) {\r\n                    value.push(ComplexNumber.fromReal(val));\r\n                    colIndexList.push(colIndex);\r\n                    elementCount ++;\r\n                }\r\n            }\r\n            rowPtrList.push(elementCount);\r\n        }\r\n\r\n        return new SparseMatrix(rowCount, columnCount, value, colIndexList, rowPtrList);\r\n    }\r\n\r\n    static fromComplexArray(array : ComplexNumber[][] = [[]]) : SparseMatrix {\r\n        const value : ComplexNumber[] = [];\r\n        const colIndexList : number[] = [];\r\n        const rowPtrList : number[] = [0];\r\n\r\n        const rowCount = array.length;\r\n        const columnCount = array[0].length;\r\n\r\n        let elementCount = 0;\r\n        for (const row of array) {\r\n            for (const [colIndex, val] of row.entries()) {\r\n                if (!val.isZero()) {\r\n                    value.push(val);\r\n                    colIndexList.push(colIndex);\r\n                    elementCount ++;\r\n                }\r\n            }\r\n            rowPtrList.push(elementCount);\r\n        }\r\n\r\n        return new SparseMatrix(rowCount, columnCount, value, colIndexList, rowPtrList);\r\n    }\r\n\r\n    static fromArray(array : (number | ComplexNumber)[][] = [[]]) : SparseMatrix {\r\n        const value : ComplexNumber[] = [];\r\n        const colIndexList : number[] = [];\r\n        const rowPtrList : number[] = [0];\r\n\r\n        const rowCount = array.length;\r\n        const columnCount = array[0].length;\r\n\r\n        let elementCount = 0;\r\n        for (const row of array) {\r\n            for (const [colIndex, val] of row.entries()) {\r\n                if (typeof val === 'number') {\r\n                    if (val !== 0) {\r\n                        value.push(ComplexNumber.fromReal(val));\r\n                        colIndexList.push(colIndex);\r\n                        elementCount ++;\r\n                    } \r\n                } else {\r\n                    if (!val.isZero()) {\r\n                        value.push(val);\r\n                        colIndexList.push(colIndex);\r\n                        elementCount ++;\r\n                    }\r\n                }\r\n            }\r\n            rowPtrList.push(elementCount);\r\n        }\r\n\r\n        return new SparseMatrix(rowCount, columnCount, value, colIndexList, rowPtrList);\r\n    }\r\n\r\n    static fromDenseMatrix(matrix : Matrix) : SparseMatrix {\r\n        return SparseMatrix.fromComplexArray(matrix.rawArray);\r\n    }\r\n\r\n    static identity(size : number) : SparseMatrix {\r\n        const value : ComplexNumber[] = Array(size).fill(ComplexNumber.ONE);\r\n        const colIndexList : number[] = Array(size).fill(0).map((_, i) => i);\r\n        const rowPtrList : number[] = Array(size + 1).fill(0).map((_, i) => i);\r\n\r\n        return new SparseMatrix(size, size, value, colIndexList, rowPtrList);\r\n    }\r\n\r\n    static zeros(rowCount : number, columnCount : number) : SparseMatrix {\r\n        const value : ComplexNumber[] = [];\r\n        const colIndexList : number[] = [];\r\n        // no index, so all of them are 0\r\n        const rowPtrList : number[] = Array(rowCount + 1).fill(0);\r\n\r\n        return new SparseMatrix(rowCount, columnCount, value, colIndexList, rowPtrList);\r\n    }\r\n\r\n    static concat(A : SparseMatrix, B : SparseMatrix, C : SparseMatrix, D : SparseMatrix) {\r\n        const value : ComplexNumber[] = [];\r\n        const colIndexList : number[] = [];\r\n        const rowPtrList : number[] = [0];\r\n\r\n        // [A, B]\r\n        // [C, D]\r\n\r\n        // check dimensions\r\n        if (\r\n            A._rowCount !== B._rowCount ||\r\n            C._rowCount !== D._rowCount ||\r\n            A._columnCount !== C._columnCount ||\r\n            B._columnCount !== D._columnCount\r\n        ) {\r\n            throw new Error('Matrices must have matching dimensions');\r\n        }\r\n\r\n        let elementCount = 0;\r\n        for (let i = 0; i < A._rowCount; i++) {\r\n            // row index is i\r\n            // column index is [this._rowPtrList[i], this._rowPtrList[i + 1]]\r\n            const rowAStart = A._rowPtrList[i];\r\n            const rowAEnd = A._rowPtrList[i + 1];\r\n\r\n            const rowBStart = B._rowPtrList[i];\r\n            const rowBEnd = B._rowPtrList[i + 1];\r\n\r\n            // iterate over the row of A\r\n            for (let j = rowAStart; j < rowAEnd; j++) {\r\n                value.push(A._value[j]);\r\n                colIndexList.push(A._colIndexList[j]);\r\n                elementCount ++;\r\n            }\r\n\r\n            // iterate over the row of B\r\n            for (let j = rowBStart; j < rowBEnd; j++) {\r\n                value.push(B._value[j]);\r\n                // notice the offset is A._columnCount\r\n                colIndexList.push(B._colIndexList[j] + A._columnCount);\r\n                elementCount ++;\r\n            }\r\n\r\n            rowPtrList.push(elementCount);\r\n        }\r\n\r\n        for (let i = 0; i < C._rowCount; i++) {\r\n\r\n            const rowCStart = C._rowPtrList[i];\r\n            const rowCEnd = C._rowPtrList[i + 1];\r\n\r\n            const rowDStart = D._rowPtrList[i];\r\n            const rowDEnd = D._rowPtrList[i + 1];\r\n\r\n            // iterate over the row of C\r\n            for (let j = rowCStart; j < rowCEnd; j++) {\r\n                value.push(C._value[j]);\r\n                colIndexList.push(C._colIndexList[j]);\r\n                elementCount ++;\r\n            }\r\n\r\n            // iterate over the row of D\r\n            for (let j = rowDStart; j < rowDEnd; j++) {\r\n                value.push(D._value[j]);\r\n                // notice the offset is C._columnCount\r\n                colIndexList.push(D._colIndexList[j] + C._columnCount);\r\n                elementCount ++;\r\n            }\r\n\r\n            rowPtrList.push(elementCount);\r\n        }\r\n\r\n        return new SparseMatrix(\r\n            A._rowCount + C._rowCount,\r\n            A._columnCount + B._columnCount,\r\n            value,\r\n            colIndexList,\r\n            rowPtrList\r\n        );\r\n    }\r\n\r\n    static interleave(A : SparseMatrix, B : SparseMatrix) {\r\n        // example:\r\n        // A = [1, 0]\r\n        //   = [0, 1]\r\n        // B = [a, b]\r\n        //   = [c, d]\r\n        // result = [1, 0, 0, 0]\r\n        //        = [0, a, 0, b]\r\n        //        = [0, 0, 1, 0]\r\n        //        = [0, c, 0, d]\r\n        // A, B are square with same dimensions\r\n\r\n        if (\r\n            A._rowCount !== B._rowCount || \r\n            A._columnCount !== B._columnCount ||\r\n            A._rowCount !== A._columnCount ||\r\n            B._rowCount !== B._columnCount\r\n        ) {\r\n            throw new Error('Matrices must have matching dimensions');\r\n        }\r\n\r\n        const value : ComplexNumber[] = [];\r\n        const colIndexList : number[] = [];\r\n        const rowPtrList : number[] = [0];\r\n\r\n        let elementCount = 0;\r\n\r\n        for (let i = 0; i < A._rowCount; i++) {\r\n\r\n            const rowAStart = A._rowPtrList[i];\r\n            const rowAEnd = A._rowPtrList[i + 1];\r\n\r\n            const rowBStart = B._rowPtrList[i];\r\n            const rowBEnd = B._rowPtrList[i + 1];\r\n\r\n            // iterate over the row of A\r\n            for (let j = rowAStart; j < rowAEnd; j++) {\r\n                value.push(A._value[j]);\r\n                colIndexList.push(A._colIndexList[j] * 2);\r\n                elementCount ++;\r\n            }\r\n            // push the row\r\n            rowPtrList.push(elementCount);\r\n\r\n            // iterate over the row of B\r\n            for (let j = rowBStart; j < rowBEnd; j++) {\r\n                value.push(B._value[j]);\r\n                colIndexList.push(B._colIndexList[j] * 2 + 1);\r\n                elementCount ++;\r\n            }\r\n\r\n            // push the row\r\n            rowPtrList.push(elementCount);\r\n        }\r\n\r\n        return new SparseMatrix(\r\n            A._rowCount * 2,\r\n            A._columnCount * 2,\r\n            value,\r\n            colIndexList,\r\n            rowPtrList\r\n        );\r\n    }\r\n\r\n    get rowCount() : number {\r\n        return this._rowCount;\r\n    }\r\n\r\n    get columnCount() : number {\r\n        return this._columnCount;\r\n    }\r\n\r\n    get(i : number, j : number) {\r\n        const rowPtr = this._rowPtrList[i];\r\n        const rowEndPtr = this._rowPtrList[i + 1];\r\n        for (let k = rowPtr; k < rowEndPtr; k++) {\r\n            if (this._colIndexList[k] === j) {\r\n                return this._value[k];\r\n            }\r\n        }\r\n        return ComplexNumber.ZERO;\r\n    }\r\n\r\n    transpose() : SparseMatrix {\r\n        // perform row-wise traversal of the matrix\r\n        const newRowCount = this._columnCount;\r\n        const newColumnCount = this._rowCount;\r\n        const newValue : ComplexNumber[] = [];\r\n        const newColIndexList : number[] = [];\r\n        const newRowPtrList : number[] = [0];\r\n\r\n        for (const columnIndex of this._colIndexList) {\r\n            newRowPtrList[columnIndex] += 1;\r\n        }\r\n        \r\n        // turn the new rowItemCount into cumulative sum\r\n        for (let index of newRowPtrList.keys()) {\r\n            newRowPtrList[index] += newRowPtrList[index - 1];\r\n        }\r\n\r\n        // this is used for indexing the new columnIndex\r\n        const copiedNewRowPtrList = newRowPtrList.slice();\r\n        \r\n        for (let i = 0; i < this._rowCount; i++) {\r\n            // row index is i\r\n            // retrieve the column index of [this._rowItemCount[i], this._rowItemCount[i+1])\r\n            const rowItemCountBefore = this._rowPtrList[i];\r\n            const rowItemCountAfter = this._rowPtrList[i+1];\r\n\r\n            for (let j = rowItemCountBefore; j < rowItemCountAfter; j++) {\r\n                // column index is this._columnIndex[j]\r\n                // the value is this._value[j]\r\n                // after transpose, the column index is i.\r\n\r\n                // put the index for \r\n                const currentColumnIndex = this._colIndexList[j];\r\n                const currentValue = this._value[j];\r\n\r\n                // find the index for the newColumnIndex and newValue\r\n                const newListIndex = copiedNewRowPtrList[currentColumnIndex];\r\n\r\n                // put the value into the new value\r\n                newValue[newListIndex] = currentValue;\r\n                // put the index into the new columnIndex\r\n                newColIndexList[newListIndex] = i;\r\n\r\n                // update the copiedNewRowItemCount\r\n                copiedNewRowPtrList[currentColumnIndex] += 1;\r\n            }\r\n        }\r\n\r\n        return new SparseMatrix(newRowCount, newColumnCount, newValue, newColIndexList, newRowPtrList);\r\n    }\r\n\r\n    matrixMultiply(other : SparseMatrix) : SparseMatrix {\r\n        // check if the this._columnCount === other._rowCount\r\n        if (this._columnCount !== other._rowCount) {\r\n            throw new Error('The column count of the first matrix must be equal to the row count of the second matrix');\r\n        }\r\n\r\n        // transpose the second matrix\r\n        const otherTranspose = other.transpose();\r\n\r\n        const newRowCount = this._rowCount;\r\n        const newColumnCount = otherTranspose._rowCount;\r\n        const newValue : ComplexNumber[] = [];\r\n        const newColIndexList : number[] = [];\r\n        const newRowPtrList : number[] = [0];\r\n\r\n        let elementCount = 0;\r\n\r\n        // perform row-wise traversal of the this matrix\r\n        for (let rowIndex = 0; rowIndex < this._rowCount; rowIndex ++) {\r\n\r\n\r\n            // determine this row start and end, [start, end)\r\n            const rowStart = this._rowPtrList[rowIndex];\r\n            const rowEnd = this._rowPtrList[rowIndex + 1];\r\n            let listIndex = rowStart;\r\n\r\n\r\n            // for each row, also perform row-wise traversal of the otherTranspose matrix\r\n            for (let otherRowIndex = 0; otherRowIndex < otherTranspose._rowCount; otherRowIndex ++) {\r\n                // const newRowIndex = rowIndex;\r\n                const newColumnIndex = otherRowIndex;\r\n\r\n                const otherRowStart = otherTranspose._rowPtrList[otherRowIndex];\r\n                const otherRowEnd = otherTranspose._rowPtrList[otherRowIndex + 1];\r\n                let otherListIndex = otherRowStart;\r\n\r\n                // check the head element of both row\r\n                let sum : ComplexNumber = ComplexNumber.ZERO;\r\n\r\n                while (listIndex < rowEnd && otherListIndex < otherRowEnd) {\r\n                    const currentColIndex = this._colIndexList[listIndex];\r\n                    const otherCurrentColIndex = otherTranspose._colIndexList[otherListIndex];\r\n\r\n                    if (currentColIndex === otherCurrentColIndex) {\r\n                        // the current element is the same, we need to add the value\r\n\r\n                        sum = sum.add(this._value[listIndex].multiply(otherTranspose._value[otherListIndex]));\r\n\r\n                        // move to the next element\r\n                        listIndex ++;\r\n                        otherListIndex ++;\r\n                    \r\n                    } else if (currentColIndex < otherCurrentColIndex) {\r\n                        // the current element is smaller, we need to move to the next element\r\n                        listIndex ++;\r\n                    } else { // currentColIndex > otherCurrentColIndex\r\n                        // the other current element is larger, we need to move to the next element\r\n                        otherListIndex ++;\r\n                    }\r\n                }\r\n\r\n                if (!sum.isZero()) {\r\n                    newValue.push(sum);\r\n                    newColIndexList.push(newColumnIndex);\r\n                    elementCount ++;\r\n                }\r\n            }\r\n\r\n            newRowPtrList.push(elementCount);\r\n        }\r\n\r\n        return new SparseMatrix(newRowCount, newColumnCount, newValue, newColIndexList, newRowPtrList);\r\n    }\r\n\r\n    vectorMultiply(vector : Vector) : Vector {\r\n        if (vector.length !== this._columnCount) {\r\n            throw new Error('The vector length must be equal to the column count of the matrix');\r\n        }\r\n\r\n        const value : ComplexNumber[] = [];\r\n\r\n        for (let rowIndex = 0; rowIndex < this._rowCount; rowIndex ++) {\r\n            const rowStart = this._rowPtrList[rowIndex];\r\n            const rowEnd = this._rowPtrList[rowIndex + 1];\r\n\r\n            let sum : ComplexNumber = ComplexNumber.ZERO;\r\n\r\n            for (let i = rowStart; i < rowEnd; i ++) {\r\n                const colIndex = this._colIndexList[i];\r\n                const currentValue = this._value[i];\r\n\r\n                sum = sum.add(currentValue.multiply(vector.get(colIndex)));\r\n            }\r\n\r\n            value.push(sum);\r\n        }\r\n\r\n        return Vector.fromComplexArray(value);\r\n    }\r\n\r\n    kroneckerProduct(other : SparseMatrix) : SparseMatrix {\r\n        const newRowCount = this._rowCount * other._rowCount;\r\n        const newColumnCount = this._columnCount * other._columnCount;\r\n        const newValue : ComplexNumber[] = [];\r\n        const newColIndexList : number[] = [];\r\n        const newRowPtrList : number[] = [0];\r\n\r\n        let elementCount = 0;\r\n\r\n        for (let rowIndex = 0; rowIndex < this._rowCount; rowIndex ++) {\r\n            const rowStart = this._rowPtrList[rowIndex];\r\n            const rowEnd = this._rowPtrList[rowIndex + 1];\r\n\r\n            for (let otherRowIndex = 0; otherRowIndex < other._rowCount; otherRowIndex ++) {\r\n                const otherRowStart = other._rowPtrList[otherRowIndex];\r\n                const otherRowEnd = other._rowPtrList[otherRowIndex + 1];\r\n\r\n                for (let listIndex = rowStart; listIndex < rowEnd; listIndex ++) {\r\n                    const colIndex = this._colIndexList[listIndex];\r\n                    const value = this._value[listIndex];\r\n\r\n                    for (let otherListIndex = otherRowStart; otherListIndex < otherRowEnd; otherListIndex ++) {\r\n                        const otherColIndex = other._colIndexList[otherListIndex];\r\n                        const otherValue = other._value[otherListIndex];\r\n\r\n                        const newColIndex = colIndex * other._columnCount + otherColIndex;\r\n\r\n                        newValue.push(value.multiply(otherValue));\r\n                        newColIndexList.push(newColIndex);\r\n\r\n                        elementCount ++;\r\n                    }\r\n                }\r\n\r\n                newRowPtrList.push(elementCount);\r\n            }\r\n        }\r\n\r\n        return new SparseMatrix(newRowCount, newColumnCount, newValue, newColIndexList, newRowPtrList);\r\n    }\r\n\r\n    toDenseMatrix() : Matrix {\r\n        const value : ComplexNumber[][] = [];\r\n\r\n        for (let rowIndex = 0; rowIndex < this._rowCount; rowIndex ++) {\r\n            const rowStart = this._rowPtrList[rowIndex];\r\n            const rowEnd = this._rowPtrList[rowIndex + 1];\r\n\r\n            const row : ComplexNumber[] = Array(this._columnCount).fill(ComplexNumber.ZERO);\r\n\r\n            for (let listIndex = rowStart; listIndex < rowEnd; listIndex ++) {\r\n                const colIndex = this._colIndexList[listIndex];\r\n                const currentValue = this._value[listIndex];\r\n\r\n                row[colIndex] = currentValue;\r\n            }\r\n\r\n            value.push(row);\r\n        }\r\n\r\n        return Matrix.fromComplexArray(value);\r\n    }\r\n\r\n    toString() {\r\n        let result : string = \"\";\r\n\r\n        for (let rowIndex = 0; rowIndex < this._rowCount; rowIndex ++) {\r\n            const rowStart = this._rowPtrList[rowIndex];\r\n            const rowEnd = this._rowPtrList[rowIndex + 1];\r\n\r\n            const row : ComplexNumber[] = Array(this._columnCount).fill(ComplexNumber.ZERO);\r\n\r\n            for (let listIndex = rowStart; listIndex < rowEnd; listIndex ++) {\r\n                const colIndex = this._colIndexList[listIndex];\r\n                const currentValue = this._value[listIndex];\r\n\r\n                row[colIndex] = currentValue;\r\n            }\r\n\r\n            result += row.join(', ') + ' \\n ';\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n","export default class ComplexNumber {\r\n    public real : number;\r\n    public imaginary : number;\r\n\r\n    private static _MINIMAL_ERROR : number = 1e-14;\r\n    private static _FIX_DIGIT = 4;\r\n\r\n    private constructor(real : number, imaginary : number) {\r\n        this.real = real;\r\n        this.imaginary = imaginary;\r\n    }\r\n\r\n    // ctor functions\r\n\r\n    static fromCartesian(real : number, imaginary : number) : ComplexNumber {\r\n        return new ComplexNumber(real, imaginary);\r\n    }\r\n\r\n    static fromReal(real : number) : ComplexNumber {\r\n        return new ComplexNumber(real, 0);\r\n    }\r\n\r\n    static fromImaginary(imaginary : number) : ComplexNumber {\r\n        return new ComplexNumber(0, imaginary);\r\n    }\r\n\r\n    static fromPolar(r : number, theta : number) : ComplexNumber {\r\n        return new ComplexNumber(r * Math.cos(theta), r * Math.sin(theta));\r\n    }\r\n\r\n    // const value functions\r\n\r\n    static get ONE() {\r\n        return new ComplexNumber(1, 0);\r\n    }\r\n\r\n    static get ZERO() {\r\n        return new ComplexNumber(0, 0);\r\n    }\r\n\r\n    // polar support\r\n\r\n    get r() : number {\r\n        return Math.sqrt(this.real * this.real + this.imaginary * this.imaginary);\r\n    }\r\n\r\n    get squaredR() : number {\r\n        return this.real * this.real + this.imaginary * this.imaginary;\r\n    }\r\n\r\n    get theta() : number {\r\n        return Math.atan2(this.imaginary, this.real);\r\n    }\r\n\r\n    set r(r : number) {\r\n        const ratio = r / this.r;\r\n        this.real *= ratio;\r\n        this.imaginary *= ratio;\r\n    }\r\n\r\n    set theta(theta : number) {\r\n        const r = this.r;\r\n        this.real = r * Math.cos(theta);\r\n        this.imaginary = r * Math.sin(theta);\r\n    }\r\n\r\n    // operation boilerplate\r\n\r\n    add(other : ComplexNumber) : ComplexNumber {\r\n        return new ComplexNumber(this.real + other.real, this.imaginary + other.imaginary);\r\n    }\r\n\r\n    addReal(real : number) : ComplexNumber {\r\n        return new ComplexNumber(this.real + real, this.imaginary);\r\n    }\r\n\r\n    addImaginary(imaginary : number) : ComplexNumber {\r\n        return new ComplexNumber(this.real, this.imaginary + imaginary);\r\n    }\r\n\r\n    increment(other : ComplexNumber) : void {\r\n        this.real += other.real;\r\n        this.imaginary += other.imaginary;\r\n    }\r\n\r\n    incrementReal(real : number) : void {\r\n        this.real += real;\r\n    }\r\n\r\n    incrementImaginary(imaginary : number) : void {\r\n        this.imaginary += imaginary;\r\n    }\r\n\r\n    subtract(other : ComplexNumber) : ComplexNumber {\r\n        return new ComplexNumber(this.real - other.real, this.imaginary - other.imaginary);\r\n    }\r\n\r\n    subtractReal(real : number) : ComplexNumber {\r\n        return new ComplexNumber(this.real - real, this.imaginary);\r\n    }\r\n\r\n    subtractImaginary(imaginary : number) : ComplexNumber {\r\n        return new ComplexNumber(this.real, this.imaginary - imaginary);\r\n    }\r\n\r\n    decrement(other : ComplexNumber) : void {\r\n        this.real -= other.real;\r\n        this.imaginary -= other.imaginary;\r\n    }\r\n\r\n    decrementReal(real : number) : void {\r\n        this.real -= real;\r\n    }\r\n\r\n    decrementImaginary(imaginary : number) : void {\r\n        this.imaginary -= imaginary;\r\n    }\r\n\r\n    multiply(other : ComplexNumber) : ComplexNumber {\r\n        return new ComplexNumber(\r\n            this.real * other.real - this.imaginary * other.imaginary, \r\n            this.real * other.imaginary + this.imaginary * other.real\r\n        );\r\n    }\r\n\r\n    multiplyReal(real : number) : ComplexNumber {\r\n        return new ComplexNumber(this.real * real, this.imaginary * real);\r\n    }\r\n\r\n    multiplyImaginary(imaginary : number) : ComplexNumber {\r\n        return new ComplexNumber(-this.imaginary * imaginary, this.real * imaginary);\r\n    }\r\n\r\n    scale(other : ComplexNumber) {\r\n        const this_real = this.real;\r\n        const this_imaginary = this.imaginary;\r\n\r\n        this.real = this_real * other.real - this_imaginary * other.imaginary;\r\n        this.imaginary = this_real * other.imaginary + this_imaginary * other.real;\r\n    }\r\n\r\n    scaleReal(real : number) {\r\n        this.real *= real;\r\n        this.imaginary *= real;\r\n    }\r\n\r\n    scaleImaginary(imaginary : number) {\r\n        const this_real = this.real;\r\n        const this_imaginary = this.imaginary;\r\n\r\n        this.real = -this_imaginary * imaginary;\r\n        this.imaginary = this_real * imaginary;\r\n    }\r\n\r\n    divide(other : ComplexNumber) : ComplexNumber {\r\n        return new ComplexNumber(\r\n            (this.real * other.real + this.imaginary * other.imaginary) / (other.real * other.real + other.imaginary * other.imaginary),\r\n            (this.imaginary * other.real - this.real * other.imaginary) / (other.real * other.real + other.imaginary * other.imaginary)\r\n        );\r\n    }\r\n\r\n    divideReal(real : number) : ComplexNumber {\r\n        return new ComplexNumber(\r\n            (this.real * real) / (real * real),\r\n            (this.imaginary * real) / (real * real)\r\n        );\r\n    }\r\n\r\n    divideImaginary(imaginary : number) : ComplexNumber {\r\n        return new ComplexNumber(\r\n            (this.imaginary * imaginary) / (imaginary * imaginary),\r\n            (-this.real * imaginary) / (imaginary * imaginary)\r\n        );\r\n    }\r\n\r\n    // cloning\r\n\r\n    clone() {\r\n        return new ComplexNumber(this.real, this.imaginary);\r\n    }\r\n\r\n    // equal test\r\n\r\n    equals(other : ComplexNumber) : boolean {\r\n        return Math.abs(this.real - other.real) < ComplexNumber._MINIMAL_ERROR && \r\n            Math.abs(this.imaginary - other.imaginary) < ComplexNumber._MINIMAL_ERROR;\r\n    }\r\n\r\n    equalsReal(real : number) : boolean {\r\n        return Math.abs(this.real - real) < ComplexNumber._MINIMAL_ERROR;\r\n    }\r\n\r\n    equalsImaginary(imaginary : number) : boolean {\r\n        return Math.abs(this.imaginary - imaginary) < ComplexNumber._MINIMAL_ERROR;\r\n    }\r\n\r\n    isZero() : boolean {\r\n        return Math.abs(this.real) < ComplexNumber._MINIMAL_ERROR && \r\n            Math.abs(this.imaginary) < ComplexNumber._MINIMAL_ERROR;\r\n    }\r\n\r\n    isOne() : boolean {\r\n        return Math.abs(this.real - 1) < ComplexNumber._MINIMAL_ERROR && \r\n            Math.abs(this.imaginary) < ComplexNumber._MINIMAL_ERROR;\r\n    }\r\n\r\n    // to string\r\n    toString(precision: number = ComplexNumber._FIX_DIGIT) : string {\r\n\r\n        // check real and imaginary part after rounding\r\n        const isRealZero = Math.abs(this.real) < Math.pow(10, -precision);\r\n        const isImaginaryZero = Math.abs(this.imaginary) < Math.pow(10, -precision);\r\n\r\n        if (isRealZero && isImaginaryZero) {\r\n            return '0';\r\n        } else if (isRealZero) {\r\n            return `${this.imaginary.toFixed(precision)}i`;\r\n        } else if (isImaginaryZero) {\r\n            return this.real.toFixed(precision);\r\n        } else {\r\n            return `${this.real.toFixed(precision)}${this.imaginary >= 0 ? ' + ' : ' - '}${Math.abs(this.imaginary).toFixed(precision)}i`;\r\n        }\r\n    }\r\n\r\n    toStringIntelligent(precision: number = ComplexNumber._FIX_DIGIT) : string {\r\n        const real = Math.round(this.real * Math.pow(10, precision)) / Math.pow(10, precision);\r\n        const imaginary = Math.round(this.imaginary * Math.pow(10, precision)) / Math.pow(10, precision);\r\n        \r\n        if (real === 0 && imaginary === 0) {\r\n            return '0';\r\n        } else if (real === 0) {\r\n            return `${imaginary}i`;\r\n        } else if (imaginary === 0) {\r\n            return `${real}`;\r\n        } else {\r\n            return `${real}${imaginary >= 0 ? ' + ' : ' - '}${imaginary}i`;\r\n        }\r\n    }\r\n\r\n    toStringPolar(precision: number = ComplexNumber._FIX_DIGIT) : string {\r\n\r\n        // check real and imaginary part after rounding\r\n        const r = this.r;\r\n        const theta = this.theta;\r\n\r\n        const isRZero = Math.abs(r) < Math.pow(10, -precision);\r\n\r\n        if (isRZero) {\r\n            return '0';\r\n        }\r\n\r\n        const isThetaZero = Math.abs(theta) < Math.pow(10, -precision);\r\n\r\n        if (isThetaZero) {\r\n            return `${r.toFixed(precision)}`;\r\n        } else {\r\n            return `${r.toFixed(precision)}e^i${theta >= 0 ? ' + ' : ' - '}${Math.abs(theta).toFixed(precision)}i`;\r\n        }\r\n    }\r\n\r\n    toStringPolarIntelligent(precision: number = ComplexNumber._FIX_DIGIT) : string {\r\n            \r\n        // check real and imaginary part after rounding\r\n        const r = Math.round(this.r * Math.pow(10, precision)) / Math.pow(10, precision);\r\n        const theta = Math.round(this.theta * Math.pow(10, precision)) / Math.pow(10, precision);\r\n\r\n        if (r === 0) {\r\n            return '0';\r\n        }\r\n\r\n        if (theta === 0) {\r\n            return `${r.toFixed(precision)}`;\r\n        } else {\r\n            return `${r.toFixed(precision)}e^i${theta >= 0 ? ' + ' : ' - '}${Math.abs(theta).toFixed(precision)}i`;\r\n        }\r\n    }\r\n}","import ComplexNumber from './ComplexNumber';\r\n\r\nexport default class Vector {\r\n    private _array : ComplexNumber[] = [];\r\n\r\n    private constructor(array : ComplexNumber[]) {\r\n        this._array = array;\r\n    }\r\n\r\n    // ctor functions\r\n\r\n    static fromNumberArray(array : number[]) : Vector {\r\n        const result : ComplexNumber[] = [];\r\n        for (const element of array) {\r\n            result.push(ComplexNumber.fromReal(element));\r\n        }\r\n        return new Vector(result);\r\n    }\r\n\r\n    static fromComplexArray(array : ComplexNumber[]) : Vector {\r\n        return new Vector(array);\r\n    }\r\n\r\n    static fromArray(array : (number | ComplexNumber)[]) : Vector {\r\n        const result : ComplexNumber[] = [];\r\n        for (const element of array) {\r\n            typeof element === 'number' \r\n                ? result.push(ComplexNumber.fromReal(element)) \r\n                : result.push(element);\r\n        }\r\n        return new Vector(result);\r\n    }\r\n\r\n    static zeros(length : number) {\r\n        const result : ComplexNumber[] = [];\r\n        for (let i = 0; i < length; i++) {\r\n            result.push(ComplexNumber.ZERO);\r\n        }\r\n        return new Vector(result);\r\n    }\r\n\r\n    static ones(length : number) {\r\n        const result : ComplexNumber[] = [];\r\n        for (let i = 0; i < length; i++) {\r\n            result.push(ComplexNumber.ONE);\r\n        }\r\n    }\r\n\r\n    static basis(length : number, index : number) {\r\n        const result : ComplexNumber[] = [];\r\n        for (let i = 0; i < length; i++) {\r\n            result.push(i === index ? ComplexNumber.ONE : ComplexNumber.ZERO);\r\n        }\r\n        return new Vector(result);\r\n    }\r\n\r\n    // property access\r\n\r\n    get length() : number {\r\n        return this._array.length;\r\n    }\r\n\r\n    get(index : number) : ComplexNumber {\r\n        return this._array[index] ?? ComplexNumber.ZERO;\r\n    }\r\n\r\n    set(index : number, value : ComplexNumber) {\r\n        this._array[index] = value;\r\n    }\r\n\r\n    increment(index : number, value : ComplexNumber) {\r\n        this._array[index] = (this._array[index] ?? ComplexNumber.ZERO).add(value);\r\n    }\r\n\r\n    isFitLength(wireLength : number) {\r\n        return this._array.length === (1 << wireLength);\r\n    }\r\n\r\n    // iterator\r\n\r\n    [Symbol.iterator]() {\r\n        return this._array[Symbol.iterator]();\r\n    }\r\n\r\n    keys() {\r\n        return this._array.keys();\r\n    }\r\n\r\n    entries() {\r\n        return this._array.entries();\r\n    }\r\n\r\n    transform(\r\n        callbackFn: (value: ComplexNumber, index : number, array : ComplexNumber[], newVector : Vector) => void,\r\n        length : number = this.length\r\n    ) {\r\n        const result = Vector.zeros(length);\r\n\r\n        for (const [index, value] of this._array.entries()) {\r\n            callbackFn(value, index, this._array, result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    split(predicate : (value: ComplexNumber, key: number, array: ComplexNumber[]) => boolean) : [Vector, Vector] {\r\n        const acceptedState = Vector.zeros(this.length);\r\n        const rejectedState = Vector.zeros(this.length);\r\n\r\n        for (const [key, value] of this._array.entries()) {\r\n            if (predicate(value, key, this._array))\r\n                acceptedState.increment(key, value.clone());\r\n            else \r\n                rejectedState.increment(key, value.clone());\r\n        }\r\n\r\n        return [acceptedState, rejectedState];\r\n    }\r\n\r\n    combine = this.add;\r\n\r\n    // operation\r\n\r\n    add(other : Vector) : Vector {\r\n        const result : ComplexNumber[] = [];\r\n\r\n        for (const [key, value] of this._array.entries()) {\r\n            result.push(value.add(other._array[key]));\r\n        }\r\n\r\n        return new Vector(result);\r\n    }\r\n\r\n    increase(other : Vector) {\r\n        for (const [key, value] of this._array.entries()) {\r\n            value.add(other._array[key]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    multiplyReal(scalar: number) : Vector {\r\n        const result : ComplexNumber[] = [];\r\n\r\n        for (const element of this._array) {\r\n            result.push(element.multiplyReal(scalar));\r\n        }\r\n\r\n        return new Vector(result);\r\n    }\r\n\r\n    multiplyComplex(scalar: ComplexNumber) : Vector {\r\n        const result : ComplexNumber[] = [];\r\n\r\n        for (const element of this._array) {\r\n            result.push(element.multiply(scalar));\r\n        }\r\n\r\n        return new Vector(result);\r\n    }\r\n\r\n    scaleReal(scalar : number) {\r\n        for (const element of this._array) {\r\n            element.scaleReal(scalar);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    scalarComplex(scalar : ComplexNumber) {\r\n        for (const element of this._array) {\r\n            element.scale(scalar);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clone() : Vector {\r\n        const result : ComplexNumber[] = [];\r\n        for (const element of this._array) {\r\n            result.push(element.clone());\r\n        }\r\n\r\n        return new Vector(result);\r\n    }\r\n\r\n    // stringify\r\n\r\n    toString() : string {\r\n        return \"[ \" + this._array.map(field => field.toString()).join(\", \") + \" ]\"\r\n    }\r\n}","import { IBasicMatrix, MatrixType } from \"../../util/Matrix\";\r\nimport Vector from \"../../util/Vector\";\r\nimport QuantumState from \"../QuantumState\";\r\nimport QuantumVectorState from \"../QuantumVectorState\";\r\n\r\nexport enum GeneratorType {\r\n    Matrix = \"Matrix\",\r\n    SparseMatrix = \"SparseMatrix\",\r\n    StateFunction = \"StateFunction\",\r\n    VectorFunction = \"VectorFunction\",\r\n    VectorStateFunction = \"VectorStateFunction\",\r\n}\r\n\r\ntype GeneratorInputMap = {\r\n    [GeneratorType.Matrix]: Vector;\r\n    [GeneratorType.SparseMatrix]: Vector;\r\n    [GeneratorType.StateFunction]: QuantumState;\r\n    [GeneratorType.VectorStateFunction]: QuantumVectorState;\r\n    [GeneratorType.VectorFunction]: Vector;\r\n}\r\n\r\ntype GeneratorMatrixTypeMap = {\r\n    [GeneratorType.Matrix] : MatrixType.Dense;\r\n    [GeneratorType.SparseMatrix] : MatrixType.Sparse;\r\n}\r\n\r\n\r\nexport type TransformFunction<T extends Vector | QuantumState | QuantumVectorState> = (state: T) => T;\r\nexport type GeneratorFunctionType<T extends GeneratorType> = GeneratorFunctionMap[T] ;\r\nexport type GeneratorInputType<T extends GeneratorType> = GeneratorInputMap[T];\r\nexport type GeneratorStateFunctionSubType = GeneratorType.StateFunction | GeneratorType.VectorStateFunction | GeneratorType.VectorFunction;\r\nexport type GeneratorMatrixFunctionSubType = GeneratorType.Matrix | GeneratorType.SparseMatrix;\r\nexport type GeneratorMatrixType<T extends GeneratorMatrixFunctionSubType> = GeneratorMatrixTypeMap[T];\r\nexport type GeneratorMatrixInstanceType<T extends GeneratorMatrixFunctionSubType> = IBasicMatrix<GeneratorMatrixType<T>>;\r\n\r\ntype GeneratorFunctionMap = {\r\n    [key in keyof GeneratorInputMap] : TransformFunction<GeneratorInputMap[key]>; \r\n}\r\n\r\n\r\n","import Vector from \"../../../util/Vector\";\r\nimport StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport QuantumVectorState from \"../../QuantumVectorState\";\r\nimport { replaceCharAt } from \"../../../util/StringHelper\";\r\nimport { GateGettable, GateConstructor } from \"../GateInterface\";\r\nimport { requireLengthMatched, requireWireInBound } from \"../GateHelper\";\r\nimport { IBasicMatrixStatic, Matrix, MatrixType, SparseMatrix } from \"../../../util/Matrix\";\r\nimport { GeneratorMatrixFunctionSubType, GeneratorType } from \"../Generator\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\nimport { GeneratorMatrixMap } from \"../GeneratorMatrixMap\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"PauliX\"]>>()\r\nexport default class PauliX implements GateGettable<GateEnum[\"PauliX\"]> {\r\n    readonly wireLength: number;\r\n    readonly wire : number;\r\n    \r\n    constructor({ wireLength, wire } : GateConstructorParameter<GateEnum[\"PauliX\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.wire = wire;\r\n    }\r\n\r\n    static create = ({ wireLength,  wire } : GateConstructorParameter<GateEnum[\"PauliX\"]>) => {\r\n        requireWireInBound(wireLength, wire);\r\n\r\n        return new PauliX({ wireLength, wire });\r\n    }\r\n\r\n    get wireRange() : [number, number] {\r\n        return [this.wire, this.wire + 1];\r\n    }\r\n\r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return PauliX.create({\r\n            wireLength,\r\n            wire: this.wire + shift\r\n        })\r\n    }\r\n    \r\n    clone() {\r\n        return new PauliX(this);\r\n    }\r\n    \r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"PauliX\"]>) {\r\n        return PauliX.create(callbackFn(this));\r\n    }\r\n\r\n    getBaseMatrix<G extends GeneratorMatrixFunctionSubType>(generatorType: G) {\r\n        return (GeneratorMatrixMap[generatorType]).fromNumberArray([\r\n            [0, 1],\r\n            [1, 0]\r\n        ])\r\n    }\r\n    \r\n    getStringStateFunction() {\r\n        return (quantumState : QuantumState) => {\r\n            requireLengthMatched(quantumState, this.wireLength);\r\n            \r\n            return quantumState.transform((value, key, _, newState) => {\r\n                newState.increment(\r\n                    replaceCharAt(key, this.wire, key[this.wire] === '0' ? '1' : '0'),\r\n                    value.clone()\r\n                    );\r\n            });\r\n        }\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        return <T extends Vector | QuantumVectorState>(state : T) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            return state.transform((value, index, _, newState) => {\r\n                newState.increment(index ^ (1 << (this.wireLength - 1 - this.wire)), value.clone());\r\n            }) as T\r\n        }\r\n    }\r\n\r\n    \r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire !== this.wire;\r\n    }\r\n\r\n    isGettable<G extends GeneratorType>(_: G): true {\r\n        return true\r\n    }\r\n}","import Vector from \"../../../util/Vector\";\r\nimport StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport ComplexNumber from \"../../../util/ComplexNumber\";\r\nimport QuantumVectorState from \"../../QuantumVectorState\";\r\nimport { GateGettable, GateConstructor } from \"../GateInterface\";\r\nimport { requireWireInBound, requireLengthMatched } from \"../GateHelper\";\r\nimport { GeneratorType, GeneratorMatrixFunctionSubType } from \"../Generator\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\nimport { GeneratorMatrixMap } from \"../GeneratorMatrixMap\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Phase\"]>>()\r\nexport default class Phase implements GateGettable<GateEnum[\"Phase\"]> {\r\n    readonly wireLength: number;\r\n    readonly wire : number;\r\n    readonly angle : number;\r\n    \r\n    constructor({ wireLength, wire, angle } : GateConstructorParameter<GateEnum[\"Phase\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.wire = wire;\r\n        this.angle = angle;\r\n    }\r\n\r\n    static create = ({ wireLength, wire, angle } : GateConstructorParameter<GateEnum[\"Phase\"]>) => {\r\n        requireWireInBound(wireLength, wire);\r\n\r\n        return new Phase({ wireLength, wire, angle });\r\n    }\r\n\r\n    get wireRange() : [number, number] {\r\n        return [this.wire, this.wire + 1];\r\n    }\r\n    \r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return Phase.create({\r\n            wireLength,\r\n            wire: this.wire + shift,\r\n            angle: this.angle\r\n        })\r\n    }\r\n\r\n    clone() {\r\n        return new Phase(this);\r\n    }\r\n    \r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"Phase\"]>) {\r\n        return Phase.create(callbackFn(this));\r\n    }\r\n    \r\n    getBaseMatrix<G extends GeneratorMatrixFunctionSubType>(generatorType : G){\r\n        return (GeneratorMatrixMap[generatorType]).fromArray([\r\n            [1, 0],\r\n            [0, ComplexNumber.fromPolar(1, this.angle)]\r\n        ])\r\n    }\r\n\r\n    getStringStateFunction() {\r\n        return (quantumState : QuantumState) => {\r\n            requireLengthMatched(quantumState, this.wireLength);\r\n\r\n            return quantumState.transform((value, key, _, newState) => {\r\n                newState.increment(\r\n                    key,\r\n                    key[this.wire] === \"0\" ? value.clone() : value.multiply(ComplexNumber.fromPolar(1, this.angle))\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        return <T extends Vector | QuantumVectorState>(state : T) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            return state.transform((value, index, _, newState) => { \r\n                newState.increment(\r\n                    index,\r\n                    (index & (1 << (this.wireLength - 1 - this.wire))) === 0 ? value : value.multiply(ComplexNumber.fromPolar(1, this.angle))\r\n                )\r\n            }) as T;\r\n        }\r\n    }\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire !== this.wire;\r\n    }\r\n\r\n    isGettable<G extends GeneratorType>(_: G): true {\r\n        return true\r\n    }\r\n}\r\n","import Vector from \"../../../util/Vector\";\r\nimport StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport ComplexNumber from \"../../../util/ComplexNumber\";\r\nimport QuantumVectorState from \"../../QuantumVectorState\";\r\nimport { GateGettable, GateConstructor } from \"../GateInterface\";\r\nimport { requireLengthMatched, requireWireInBound } from \"../GateHelper\";\r\nimport { GeneratorMatrixFunctionSubType, GeneratorType } from \"../Generator\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\nimport { GeneratorMatrixMap } from \"../GeneratorMatrixMap\";\r\n\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Rz\"]>>()\r\nexport default class Rz implements GateGettable<GateEnum[\"Rz\"]> {\r\n    readonly wireLength: number;\r\n    readonly wire : number;\r\n    readonly angle : number;\r\n    \r\n    constructor({ wireLength, wire, angle } : GateConstructorParameter<GateEnum[\"Rz\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.wire = wire;\r\n        this.angle = angle;\r\n    }\r\n\r\n    static create = ({ wireLength, wire, angle } : GateConstructorParameter<GateEnum[\"Rz\"]>) => {\r\n        requireWireInBound(wireLength, wire);\r\n\r\n        return new Rz({ wireLength, wire, angle });\r\n    }\r\n\r\n    get wireRange() : [number, number] {\r\n        return [this.wire, this.wire + 1];\r\n    }\r\n\r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return Rz.create({\r\n            wireLength,\r\n            wire: this.wire + shift,\r\n            angle: this.angle\r\n        })\r\n    }\r\n\r\n    clone() {\r\n        return new Rz(this);\r\n    }\r\n\r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"Rz\"]>) {\r\n        return Rz.create(callbackFn(this));\r\n    }\r\n\r\n    getBaseMatrix<G extends GeneratorMatrixFunctionSubType>(generatorType : G) {\r\n        return (GeneratorMatrixMap[generatorType]).fromArray([\r\n            [ComplexNumber.fromPolar(1, -this.angle / 2), 0],\r\n            [0, ComplexNumber.fromPolar(1, this.angle / 2)]\r\n        ])\r\n    }\r\n\r\n    getStringStateFunction() {\r\n        return (quantumState : QuantumState) => {\r\n            requireLengthMatched(quantumState, this.wireLength);\r\n\r\n            return quantumState.transform((value, key, _, newState) => {\r\n                newState.increment(\r\n                    key,\r\n                    value.multiply(ComplexNumber.fromPolar(1, key[this.wire] === \"0\" \r\n                        ? -this.angle / 2 \r\n                        : this.angle / 2\r\n                    ))\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        return <T extends Vector | QuantumVectorState>(state : T) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            return state.transform((value, index, _, newState) => {\r\n                newState.increment(\r\n                    index,\r\n                    value.multiply(ComplexNumber.fromPolar(1, index & (1 << (this.wireLength - 1 - this.wire))\r\n                       ? -this.angle / 2\r\n                       : this.angle / 2\r\n                    ))\r\n                )\r\n            }) as T;\r\n        }\r\n    }\r\n\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire !== this.wire;\r\n    }\r\n\r\n    isGettable<G extends GeneratorType>(_: G): true {\r\n        return true\r\n    }\r\n}\r\n","import StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport { reverseString } from \"../../../util/StringHelper\";\r\nimport { GateMaybeGettable, GateConstructor } from \"../GateInterface\";\r\nimport { GeneratorType } from \"../Generator\";\r\nimport { requireLengthMatched, requireWireInBound, requireWireIsSmallerThan } from \"../GateHelper\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Flip\"]>>()\r\nexport default class Flip implements GateMaybeGettable<GateEnum[\"Flip\"]> {\r\n    readonly wireLength: number;\r\n    readonly startWire : number;\r\n    readonly endWire : number;\r\n\r\n    get wireRange() : [number, number] {\r\n        return [this.startWire, this.endWire];\r\n    }\r\n\r\n    constructor({ wireLength, startWire, endWire } : GateConstructorParameter<GateEnum[\"Flip\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.startWire = startWire;\r\n        this.endWire = endWire;\r\n    }\r\n\r\n    static create = ({ wireLength, startWire, endWire } : GateConstructorParameter<GateEnum[\"Flip\"]>) => {\r\n        requireWireInBound(wireLength, startWire);\r\n        requireWireInBound(wireLength, endWire - 1);\r\n        requireWireIsSmallerThan(startWire, endWire);\r\n \r\n        return new Flip({ wireLength, startWire, endWire });\r\n    }\r\n\r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return Flip.create({\r\n            wireLength,\r\n            startWire: this.startWire + shift,\r\n            endWire: this.endWire + shift\r\n        })\r\n    }\r\n\r\n\r\n    clone() {\r\n        return new Flip(this);\r\n    }\r\n\r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"Flip\"]>) {\r\n        return Flip.create(callbackFn(this))\r\n    }\r\n\r\n    getBaseMatrix() {\r\n        return null;\r\n    }\r\n\r\n    getStringStateFunction() {\r\n        return (quantumState : QuantumState) => {\r\n            requireLengthMatched(quantumState, this.wireLength);\r\n\r\n            return quantumState.transform((value, key, _, newState) => {\r\n                newState.increment(\r\n                    reverseString(key),\r\n                    value.clone()\r\n                )\r\n            }); \r\n        }\r\n    }\r\n\r\n    getNumberStateFunction() : null {\r\n        return null;\r\n    }\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire < this.startWire || controlWire >= this.endWire;\r\n    }\r\n\r\n    isGettable<U extends GeneratorType>(generatorType: U) {\r\n        return generatorType === GeneratorType.StateFunction;\r\n    }\r\n}","import StaticImpl from \"../../../util/StaticImpl\";\r\nimport { GeneratorType } from \"../Generator\";\r\nimport { GateConstructor, GateNotGettable } from \"../GateInterface\";\r\nimport { requireWireInBound, requireWireIsSmallerThan } from \"../GateHelper\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Fourier\"]>>()\r\nexport default class Fourier implements GateNotGettable<GateEnum[\"Fourier\"]> {\r\n    readonly wireLength: number;\r\n    readonly startWire : number;\r\n    readonly endWire : number;\r\n\r\n    get wireRange() {\r\n        return undefined;\r\n    }\r\n\r\n    constructor({ wireLength, startWire, endWire } : GateConstructorParameter<GateEnum[\"Fourier\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.startWire = startWire;\r\n        this.endWire = endWire;\r\n    }\r\n\r\n    static create = ({ wireLength, startWire, endWire } : GateConstructorParameter<GateEnum[\"Fourier\"]>) => {\r\n        requireWireInBound(wireLength, startWire);\r\n        requireWireInBound(wireLength, endWire - 1);\r\n        requireWireIsSmallerThan(startWire, endWire);\r\n\r\n        return new Fourier({ wireLength, startWire, endWire });\r\n    }\r\n\r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return Fourier.create({\r\n            wireLength,\r\n            startWire: this.startWire + shift,\r\n            endWire: this.endWire + shift\r\n        })\r\n    }\r\n\r\n    clone() {\r\n        return new Fourier(this);\r\n    }\r\n\r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"Fourier\"]>) {\r\n        return Fourier.create(callbackFn(this))\r\n    }\r\n\r\n    getBaseMatrix() {\r\n        return null;\r\n    }\r\n\r\n    getStringStateFunction() {\r\n        return null\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        return null;\r\n    }\r\n\r\n    isGettable<G extends GeneratorType>(_: G): false {\r\n        return false\r\n    }\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire < this.startWire || controlWire >= this.endWire;\r\n    }\r\n}","import Vector from \"../../../util/Vector\";\r\nimport StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport QuantumVectorState from \"../../QuantumVectorState\";\r\nimport { swapCharAt } from \"../../../util/StringHelper\";\r\nimport { Gate, GateConstructor, GateNotGettable } from \"../GateInterface\";\r\nimport { MatrixType, IBasicMatrixStatic, Matrix, SparseMatrix } from \"../../../util/Matrix\";\r\nimport { requireWireInBound, requireLengthMatched, requireWireIsNotEqual } from \"../GateHelper\";\r\nimport { GateConstructorParameter, GateEnum, GateParameterTransformFunction } from \"../GateType\";\r\nimport { TransformFunction, GeneratorType, GeneratorFunctionType } from \"../Generator\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Swap\"]>>()\r\nexport default class Swap implements GateNotGettable<GateEnum[\"Swap\"]> {\r\n    readonly wireLength: number;\r\n    readonly wireOne : number;\r\n    readonly wireTwo : number;\r\n    \r\n    get wireRange() {\r\n        return undefined;\r\n    }\r\n\r\n    constructor({ wireLength, wireOne, wireTwo } : GateConstructorParameter<GateEnum[\"Swap\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.wireOne = wireOne;\r\n        this.wireTwo = wireTwo;\r\n    }\r\n\r\n    static create = ({ wireLength, wireOne, wireTwo } : GateConstructorParameter<GateEnum[\"Swap\"]>) => {\r\n        requireWireInBound(wireLength, wireOne);\r\n        requireWireInBound(wireLength, wireTwo);\r\n        requireWireIsNotEqual(wireOne, wireTwo);\r\n\r\n        return new Swap({ wireLength, wireOne, wireTwo });\r\n    }\r\n\r\n    shift({shift, wireLength}: { shift: number; wireLength: number; }) {\r\n        return Swap.create({\r\n            wireLength,\r\n            wireOne : this.wireOne + shift,\r\n            wireTwo : this.wireTwo + shift\r\n        })\r\n    }\r\n\r\n    clone() {\r\n        return new Swap(this);\r\n    }\r\n\r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"Swap\"]>) {\r\n        return Swap.create(callbackFn(this));\r\n    }\r\n\r\n    getBaseMatrix() {\r\n        return null\r\n        // const countBetween = Math.abs(this.wireTwo - this.wireOne) - 2;\r\n        // const identity = MatrixCtor.identity(2 ** countBetween);\r\n\r\n        // const matrixLeftUp = identity.kroneckerProduct(\r\n        //     MatrixCtor.fromNumberArray([\r\n        //         [1, 0],\r\n        //         [0, 0]\r\n        //     ])\r\n        // )\r\n        // const matrixRightUp = identity.kroneckerProduct(\r\n        //     MatrixCtor.fromNumberArray([\r\n        //         [0, 1],\r\n        //         [0, 0]\r\n        //     ])\r\n        // )\r\n        // const matrixLeftDown = identity.kroneckerProduct(\r\n        //     MatrixCtor.fromNumberArray([\r\n        //         [0, 0],\r\n        //         [1, 0]\r\n        //     ])\r\n        // )\r\n        // const matrixRightDown = identity.kroneckerProduct(\r\n        //     MatrixCtor.fromNumberArray([\r\n        //         [0, 0],\r\n        //         [0, 1]\r\n        //     ])\r\n        // )\r\n\r\n        // return MatrixCtor.concat(matrixLeftUp, matrixLeftDown, matrixRightUp, matrixRightDown);\r\n    }\r\n\r\n\r\n    getStringStateFunction() {\r\n        // return (quantumState : QuantumState) => {\r\n        //     requireLengthMatched(quantumState, this.wireLength);\r\n\r\n        //     return quantumState.transform((value, key, _, newState) => {\r\n        //         newState.increment(\r\n        //             swapCharAt(key, this.wireOne, this.wireTwo),\r\n        //             value.clone()\r\n        //         );\r\n        //     });\r\n        // }\r\n        return null;\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        // return <T extends Vector | QuantumVectorState>(state : T) => {\r\n        //     requireLengthMatched(state, this.wireLength);\r\n\r\n        //     return state.transform((value, key, _, newState) => {\r\n        //         const bitOne = (key >> this.wireOne) & 1;\r\n        //         const bitTwo = (key >> this.wireTwo) & 1;\r\n\r\n        //         let x = bitOne ^ bitTwo;\r\n        //         x = (x << this.wireOne) | (x << this.wireTwo);\r\n\r\n        //         newState.increment(\r\n        //             x ^ key,\r\n        //             value.clone()\r\n        //         )\r\n        //     }) as T;\r\n        // }\r\n\r\n        return null;\r\n    }\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire !== this.wireOne && controlWire !== this.wireTwo;\r\n    }\r\n\r\n    isGettable<G extends GeneratorType>(_: G): false {\r\n        return false;\r\n    }\r\n}","const Hadamard = Symbol.for('Hadamard');\r\nconst PauliX = Symbol.for('PauliX');\r\nconst Phase = Symbol.for('Phase');\r\nconst Rz = Symbol.for('Rz');\r\n\r\nconst Swap = Symbol.for('Swap');\r\nconst Flip = Symbol.for('Flip');\r\nconst Fourier = Symbol.for('Fourier');\r\nconst Shor = Symbol.for('Shor');\r\n\r\nexport const ElementaryGateSymbol = {\r\n    Hadamard, PauliX, Phase, Rz,\r\n} as const\r\n\r\nexport const ExtendedGateSymbol = {\r\n    Swap, Flip, Fourier, Shor,\r\n} as const\r\n\r\nexport const GateSymbol = {\r\n    ...ElementaryGateSymbol,\r\n    ...ExtendedGateSymbol,\r\n} as const","import { GateConstructorMap } from \"./GateConstructorMap\";\r\nimport { Gate, GateConstructor, GateGettable } from \"./GateInterface\";\r\nimport { GeneratorType, GeneratorFunctionType, GeneratorMatrixFunctionSubType } from \"./Generator\";\r\nimport { GateConstructorParameter, GateEnumValue, GateParameterTransformFunction } from \"./GateType\";\r\n\r\nimport { \r\n    AtomicGate, \r\n    BasedOn, \r\n    BasisGettable, \r\n    Controlled, \r\n    Gettable, \r\n    Inverted, \r\n    NotInverted, \r\n    NotInvertedSinglyControlledBasedOn, \r\n    NotInvertedUncontrolledBasedOn, \r\n    SinglyControlled, \r\n    Uncontrolled \r\n} from \"./QuantumGateType\";\r\n\r\nimport Hadamard from \"./ElementaryGate/Hadamard\";\r\nimport PauliX from \"./ElementaryGate/PauliX\";\r\nimport Phase from \"./ElementaryGate/Phase\";\r\n\r\nimport Vector from \"../../util/Vector\";\r\nimport QuantumState from \"../QuantumState\";\r\nimport QuantumVectorState from \"../QuantumVectorState\";\r\nimport { everyChar } from \"../../util/StringHelper\";\r\nimport { GeneratorMatrixCtor } from \"./GeneratorMatrixMap\";\r\nimport { requireLengthMatched } from \"./GateHelper\";\r\n\r\n\r\nexport type FactoryUncontrolledGateParameter<T extends GateEnumValue> = GateConstructorParameter<T> & {\r\n    type : T\r\n}\r\n\r\nexport type FactorySingleControlledGateParameter<T extends GateEnumValue> = FactoryUncontrolledGateParameter<T> & {\r\n    controlWire : number\r\n}\r\n\r\nexport type FactoryControlledGateParameter<T extends GateEnumValue> = GateConstructorParameter<T> & {\r\n    isInverse : boolean,\r\n    controlWire : Set<number>,\r\n}\r\n\r\n\r\nexport class QuantumGate {\r\n    readonly basis : Gate<GateEnumValue>;\r\n    readonly wireLength : number;\r\n    readonly isInverse : boolean;\r\n    readonly controlWire : Set<number>;\r\n\r\n    constructor(gate : Gate<GateEnumValue>, controlWire : Set<number>, isInverse : boolean) {\r\n        this.basis = gate;\r\n        this.wireLength = gate.wireLength;\r\n        this.controlWire = controlWire;\r\n        this.isInverse = isInverse;\r\n    }\r\n\r\n    static create<T extends GateEnumValue>(gate : Gate<T>, controlWire : Set<number> = new Set(), isInverse : boolean = false) {\r\n        controlWire.forEach((wire) => {\r\n            if (!gate.isValidControlWire(wire)) {\r\n                throw new Error(`Control wire [${wire}] is invalid.`);\r\n            }\r\n        })\r\n\r\n        return new QuantumGate(gate, new Set(controlWire), isInverse);\r\n    }\r\n\r\n    static getBasisGate<T extends GateEnumValue>(gateType : T, parameter : GateConstructorParameter<T>) {\r\n        return GateConstructorMap[gateType].create(parameter as unknown as GateConstructorParameter<any>)\r\n    }\r\n\r\n    static fromBasis<T extends GateEnumValue>({ type, ...parameter } : FactoryUncontrolledGateParameter<T>) \r\n    : QuantumGate & NotInvertedUncontrolledBasedOn<T> {\r\n        return QuantumGate.create<T>(\r\n            QuantumGate.getBasisGate<T>(type, parameter as unknown as GateConstructorParameter<T>) as unknown as Gate<T>\r\n        ) as unknown as QuantumGate & NotInvertedUncontrolledBasedOn<T>;\r\n    }\r\n\r\n    static fromSingleControlled<T extends GateEnumValue>({ type, controlWire, ...parameter } : FactorySingleControlledGateParameter<T>) \r\n    : QuantumGate & NotInvertedSinglyControlledBasedOn<T> {\r\n        return QuantumGate.create<T>(\r\n            QuantumGate.getBasisGate<T>(type, parameter as unknown as GateConstructorParameter<T>) as unknown as Gate<T>, \r\n            new Set<number>().add(controlWire),\r\n        ) as unknown as QuantumGate & NotInvertedSinglyControlledBasedOn<T>;\r\n    }\r\n\r\n    static toUncontrolled<T extends QuantumGate>(gate : T & Controlled) : T & Uncontrolled {\r\n        return QuantumGate.create(gate.basis.clone(), new Set(), gate.isInverse) as unknown as T & Uncontrolled;\r\n    }\r\n\r\n    static toControlled<T extends QuantumGate>(gate : (T & Uncontrolled) | T, controlWire : number[]) : T & Controlled {\r\n        const newSet = new Set(controlWire);\r\n\r\n        // add controlWire to the original set\r\n        controlWire.forEach(newSet.add, newSet)\r\n\r\n        return QuantumGate.create(\r\n            gate.basis.clone(), \r\n            newSet, \r\n            gate.isInverse\r\n        ) as unknown as T & Controlled;\r\n    }\r\n\r\n    static toSinglyControlled<T extends QuantumGate>(gate : (T & Uncontrolled) | T, controlWire : number) : T & SinglyControlled {\r\n        return QuantumGate.create(gate.basis.clone(), new Set(gate.controlWire).add(controlWire), gate.isInverse) as unknown as T & SinglyControlled;\r\n    }\r\n\r\n    transformBasis(callbackFn : GateParameterTransformFunction<GateEnumValue>) {\r\n        return QuantumGate.create(this.basis.transform(callbackFn), this.controlWire, this.isInverse);\r\n    }\r\n\r\n    shiftBasis(parameter : { shift : number, wireLength : number }) {\r\n        return QuantumGate.create(this.basis.shift(parameter), this.controlWire, this.isInverse);\r\n    }\r\n\r\n\r\n\r\n    clone() {\r\n        return new QuantumGate(this.basis.clone(), new Set(this.controlWire), this.isInverse);\r\n    }\r\n\r\n    toInverted() {\r\n        return new QuantumGate(this.basis.clone(), new Set(this.controlWire), !this.isInverse);\r\n    }\r\n\r\n    // getters\r\n\r\n    isGettable<T extends GeneratorType>(generatorType : T) : this is Gettable {\r\n        return (this.isNotInverted()) && (this.isBasisGettable(generatorType));\r\n    }\r\n\r\n    isBasisGettable<T extends GeneratorType>(generatorType : T) : this is BasisGettable {\r\n        return this.basis.isGettable(generatorType);\r\n    }\r\n\r\n    get<T extends GeneratorType>(generatorType : T) : GeneratorFunctionType<T> | null {\r\n        if (!this.isGettable(generatorType)) {\r\n            return null;\r\n        }\r\n                \r\n        switch (generatorType) {\r\n            case GeneratorType.Matrix:\r\n            case GeneratorType.SparseMatrix:\r\n                return this.getMatrixFunction(generatorType) as GeneratorFunctionType<T>;\r\n            case GeneratorType.StateFunction:\r\n                return this.getStringStateFunction() as GeneratorFunctionType<T>;\r\n            case GeneratorType.VectorStateFunction:\r\n            case GeneratorType.VectorFunction:\r\n                return this.getVectorStateFunction() as GeneratorFunctionType<T>;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    \r\n    getMatrix<T extends GeneratorMatrixFunctionSubType>(generatorType : T) {\r\n        if (!this.isGettable(generatorType)) {\r\n            return null;\r\n        }\r\n\r\n        const basis : GateGettable<GateEnumValue> = this.basis;\r\n\r\n        const wireLength = basis.wireLength;\r\n        const [startGateWire, endGateWire] = basis.wireRange;\r\n\r\n        const MatrixCtor = GeneratorMatrixCtor(generatorType);\r\n        \r\n        let matrix = basis.getBaseMatrix<T>(generatorType);\r\n\r\n        let emptyWireCount = 0;\r\n\r\n        for (let wire = startGateWire - 1; wire >= 0; wire--) {\r\n            // check if the gate controls the control wire that is equal to the current wire\r\n            if (!this.controlWire.has(wire)) {\r\n                emptyWireCount++\r\n            } else {\r\n                if (emptyWireCount !== 0) {\r\n                    // apply the tensor product I^(emptyWireCount) kron matrix\r\n                    matrix = MatrixCtor.identity(2 ** emptyWireCount).kroneckerProduct(matrix);\r\n                    emptyWireCount = 0;\r\n                }\r\n\r\n                // the top control wire matrix look like\r\n                // [I, 0]\r\n                // [0, matrix]\r\n                matrix = MatrixCtor.concat(\r\n                    MatrixCtor.identity(matrix.rowCount), MatrixCtor.zeros(matrix.rowCount, matrix.rowCount),\r\n                    MatrixCtor.zeros(matrix.rowCount, matrix.rowCount), matrix\r\n                )\r\n            }\r\n        }\r\n\r\n        if (emptyWireCount !== 0) {\r\n            // apply the tensor product I^(emptyWireCount) kron matrix\r\n            matrix = MatrixCtor.identity(2 ** emptyWireCount).kroneckerProduct(matrix);\r\n            emptyWireCount = 0;\r\n        }\r\n        \r\n        for (let wire = endGateWire; wire < wireLength; wire++) {\r\n            // check if the gate controls the control wire that is equal to the current wire\r\n            if (!this.controlWire.has(wire)) {\r\n                emptyWireCount++\r\n            } else {\r\n                if (emptyWireCount !== 0) {\r\n                    // apply the tensor product I^(emptyWireCount) kron matrix\r\n                    matrix = matrix.kroneckerProduct(MatrixCtor.identity(2 ** emptyWireCount));\r\n                    emptyWireCount = 0;\r\n                }\r\n\r\n                // do an interleave\r\n                matrix = MatrixCtor.interleave(MatrixCtor.identity(matrix.rowCount), matrix);\r\n            }\r\n        }\r\n        \r\n        if (emptyWireCount !== 0) {\r\n            // apply the tensor product I^(emptyWireCount) kron matrix\r\n            matrix = matrix.kroneckerProduct(MatrixCtor.identity(2 ** emptyWireCount));\r\n            emptyWireCount = 0;\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    getMatrixFunction<T extends GeneratorMatrixFunctionSubType>(generatorType : T) {\r\n        if (!this.isGettable(generatorType)) {\r\n            return null;\r\n        }\r\n\r\n        // always work, since possible case to return null is already returned\r\n        const matrix = this.getMatrix(generatorType)!;\r\n        return (vector : Vector) => {\r\n            requireLengthMatched(vector, this.wireLength);\r\n\r\n            return matrix.vectorMultiply(vector);\r\n        }\r\n    }\r\n\r\n\r\n    getStringStateFunction() {\r\n        if (!this.isGettable(GeneratorType.StateFunction)) {\r\n            return null;\r\n        }\r\n\r\n        const basis : GateGettable<GateEnumValue> = this.basis;\r\n\r\n        return (state : QuantumState) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            if (this.isUncontrolled()) {\r\n                return basis.getStringStateFunction()(state);\r\n            }\r\n\r\n            const [acceptedState, rejectedState] = state.split((_, key) => \r\n                everyChar(key, (char, index) => !this.controlWire.has(index) || char === \"1\")\r\n            )\r\n\r\n            return basis.getStringStateFunction()(acceptedState).combine(rejectedState);\r\n        }\r\n    }\r\n\r\n    getVectorStateFunction() {\r\n        if (!this.isGettable(GeneratorType.StateFunction)) {\r\n            return null;\r\n        }\r\n\r\n        const basis : GateGettable<GateEnumValue> = this.basis\r\n        const checkerNumber = [...this.controlWire].reduce((acc, wire) => acc + 2 ** (this.wireLength - wire - 1), 0)\r\n        \r\n        \r\n        return (state : Vector | QuantumVectorState) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            const [acceptedState, rejectedState] = state.split((_, key) => \r\n                (key & checkerNumber) === checkerNumber\r\n            )\r\n\r\n            return basis.getNumberStateFunction()(acceptedState as QuantumVectorState & Vector)\r\n                        .combine(rejectedState as QuantumVectorState & Vector);\r\n        }\r\n    }\r\n\r\n\r\n    // Discriminator\r\n\r\n        \r\n    isElementaryGate() : this is AtomicGate {\r\n        return this.isNotInvertedUncontrolledBasedOn(Hadamard) ||\r\n            this.isNotInvertedUncontrolledBasedOn(Phase) ||\r\n            this.isNotInvertedSinglyControlledBasedOn(PauliX);\r\n    }\r\n\r\n    isInverted() : this is Inverted {\r\n        return this.isInverse;\r\n    }\r\n\r\n    isNotInverted() : this is NotInverted {\r\n        return !this.isInverse;\r\n    }\r\n\r\n    isControlled() : this is Controlled {\r\n        return this.controlWire.size > 0;\r\n    }\r\n\r\n    isUncontrolled() : this is Uncontrolled {\r\n        return this.controlWire.size === 0;\r\n    }\r\n\r\n    isSinglyControlled() : this is SinglyControlled {\r\n        return this.controlWire.size === 1;\r\n    }\r\n\r\n    isBasedOn<T extends GateEnumValue>(basisCtor : GateConstructor<T>) : this is BasedOn<T> {\r\n        return this.basis instanceof basisCtor;\r\n    }\r\n\r\n    isNotInvertedUncontrolledBasedOn<T extends GateEnumValue>(basisCtor : GateConstructor<T>) : this is NotInvertedUncontrolledBasedOn<T> {\r\n        return this.isNotInverted() && this.isUncontrolled() && this.isBasedOn(basisCtor);    \r\n    }\r\n    \r\n    isNotInvertedSinglyControlledBasedOn<T extends GateEnumValue>(basisCtor : GateConstructor<T>) : this is NotInvertedSinglyControlledBasedOn<T> {\r\n        return this.isNotInverted() && this.isSinglyControlled() && this.isBasedOn(basisCtor);\r\n    }\r\n\r\n}","import { GateSymbol } from \"./GateSymbol\";\r\nimport Hadamard from \"./ElementaryGate/Hadamard\";\r\nimport PauliX from \"./ElementaryGate/PauliX\";\r\nimport Phase from \"./ElementaryGate/Phase\";\r\nimport Rz from \"./ElementaryGate/Rz\";\r\nimport Swap from \"./ExtendedGate/Swap\";\r\nimport Flip from \"./ExtendedGate/Flip\";\r\nimport Fourier from \"./ExtendedGate/Fourier\";\r\nimport Shor from \"./ExtendedGate/Shor\";\r\n\r\nconst ElementaryGateConstructorMap = {\r\n    [GateSymbol.Hadamard]: Hadamard,\r\n    [GateSymbol.PauliX]: PauliX,\r\n    [GateSymbol.Phase]: Phase,\r\n    [GateSymbol.Rz]: Rz,\r\n    [GateSymbol.Swap]: Swap,\r\n} as const;\r\n\r\nconst ExtendedGateConstructorMap = {\r\n    [GateSymbol.Flip]: Flip,\r\n    [GateSymbol.Fourier]: Fourier,\r\n    [GateSymbol.Shor]: Shor,\r\n} as const;\r\n\r\nexport const GateConstructorMap = {\r\n    ...ElementaryGateConstructorMap,\r\n    ...ExtendedGateConstructorMap,\r\n} as const;\r\n","import StaticImpl from \"../../../util/StaticImpl\";\r\nimport QuantumState from \"../../QuantumState\";\r\nimport { Gate, GateConstructor, GateMaybeGettable } from \"../GateInterface\";\r\nimport { TransformFunction, GeneratorType, GeneratorFunctionType } from \"../Generator\";\r\nimport { replaceCharBetween, toBinaryString, toDecimal } from \"../../../util/StringHelper\";\r\nimport { requireLengthMatched, requireWireInBound, requireWireIsSmallerThan } from \"../GateHelper\";\r\nimport { GateEnum, GateConstructorParameter, GateParameterTransformFunction } from \"../GateType\";\r\nimport { MatrixType, IBasicMatrixStatic, IBasicMatrix } from \"../../../util/Matrix\";\r\nimport QuantumVectorState from \"../../QuantumVectorState\";\r\nimport Vector from \"../../../util/Vector\";\r\n\r\n@StaticImpl<GateConstructor<GateEnum[\"Shor\"]>>()\r\nexport default class Shor implements GateMaybeGettable<GateEnum[\"Shor\"]> {\r\n    readonly wireLength: number;\r\n    readonly startWire : number;\r\n    readonly endWire : number;\r\n    readonly x : number;\r\n    readonly N : number;\r\n\r\n    get wireRange() : [number, number] {\r\n        return [this.startWire, this.endWire];\r\n    }\r\n    \r\n    constructor({ wireLength, startWire, endWire, x, N } : GateConstructorParameter<GateEnum[\"Shor\"]>) {\r\n        this.wireLength = wireLength;\r\n        this.startWire = startWire;\r\n        this.endWire = endWire;\r\n        this.x = x;\r\n        this.N = N;\r\n    }\r\n\r\n    static create = ({ wireLength, startWire, endWire, x, N } : GateConstructorParameter<GateEnum[\"Shor\"]>) => {\r\n        requireWireInBound(wireLength, startWire);\r\n        requireWireInBound(wireLength, endWire - 1);\r\n        requireWireIsSmallerThan(startWire, endWire);\r\n\r\n        if (x < 0 || x >= N) {\r\n            throw new Error(`x must be in range [0, ${N}).`);\r\n        }\r\n\r\n        if (Math.ceil(Math.log2(N)) != endWire - startWire) {\r\n            throw new Error(`The number of wires must be equal to the number of bits in N.`);\r\n        }\r\n\r\n        return new Shor({ wireLength, startWire, endWire, x, N });\r\n    }\r\n\r\n    shift({ shift, wireLength }: { shift: number; wireLength: number; }) {\r\n        return Shor.create({\r\n            wireLength,\r\n            startWire: this.startWire + shift,\r\n            endWire: this.endWire + shift,\r\n            x : this.x,\r\n            N : this.N\r\n        })\r\n    }\r\n\r\n    clone() {\r\n        return new Shor(this);\r\n    }\r\n\r\n    transform(callbackFn: GateParameterTransformFunction<GateEnum[\"Shor\"]>) {\r\n        return Shor.create(callbackFn(this));\r\n    }\r\n\r\n    getBaseMatrix() {\r\n        return null;\r\n    }\r\n\r\n    getStringStateFunction() {\r\n        return (quantumState : QuantumState) => {\r\n            requireLengthMatched(quantumState, this.wireLength);\r\n\r\n            return quantumState.transform((value, key, _, newState) => {\r\n                const y = toDecimal(key.slice(this.startWire, this.endWire));\r\n                const newY = (y >= this.N) ? y : (y * this.x) % this.N;\r\n\r\n                newState.increment(\r\n                    replaceCharBetween(\r\n                        key, \r\n                        this.startWire, this.endWire, \r\n                        toBinaryString(newY, this.endWire - this.startWire)\r\n                    ),\r\n                    value.clone()\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    getNumberStateFunction() {\r\n        return <T extends Vector | QuantumVectorState>(state : T) => {\r\n            requireLengthMatched(state, this.wireLength);\r\n\r\n            return state.transform((value, key, _, newState) => {\r\n                // slice the bits from startWire to endWire\r\n                const y = (key >> (this.wireLength - this.endWire)) & ((1 << (this.endWire - this.startWire)) - 1);\r\n                const newY = (y >= this.N) ? y : (y * this.x) % this.N;\r\n\r\n                newState.increment(\r\n                    // ((150 >> (8 - 3) << (6 - 3) | 7) << (8 - 6)) | (150 & (1 << (8 - 6) - 1)),\r\n                    ((key >> (this.wireLength - this.startWire) << (this.endWire - this.startWire) | newY) << (this.wireLength - this.endWire)) | \r\n                        (key & ((1 << (this.wireLength - this.endWire)) - 1)),\r\n                    value.clone()\r\n                )\r\n            }) as T;\r\n        }\r\n    }\r\n\r\n    isValidControlWire(controlWire : number) : boolean {\r\n        return controlWire < this.startWire || controlWire >= this.endWire;\r\n    }\r\n\r\n    // atomize(type: AtomizeType): QuantumGate[] {\r\n    //     if (type === AtomizeType.All) {\r\n    //         throw new Error(\"Shor gate atomize is not supported.\");\r\n    //     }\r\n\r\n    //     return [QuantumGate.wrap(this)];\r\n    // }\r\n\r\n    isGettable<G extends GeneratorType>(generatorType: G): boolean {\r\n        switch (generatorType) {\r\n            case GeneratorType.StateFunction:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n}","import Vector from \"../util/Vector\";\r\nimport ComplexNumber from \"../util/ComplexNumber\";\r\nimport { toBinaryString, toDecimal } from \"../util/StringHelper\";\r\n\r\nexport enum PrintType {\r\n    Integer, Binary\r\n}\r\n\r\nexport default class QuantumState {\r\n    private _map : Map<string, ComplexNumber>;\r\n    readonly bitLength : number;\r\n\r\n    private constructor(map : Map<string, ComplexNumber>, bitLength : number) {\r\n        this._map = map;\r\n        this.bitLength = bitLength;\r\n    }\r\n\r\n    // ctor functions\r\n    static fromVector(vector : Vector, bitLength : number) {\r\n        const map : Map<string, ComplexNumber> = new Map();\r\n\r\n        for (const [index, value] of vector.entries()) {\r\n            if (!value.isZero()) {\r\n                // express index into binary form, put that into an array\r\n                map.set(toBinaryString(index, bitLength), value);\r\n            }\r\n        }\r\n\r\n        return new QuantumState(map, bitLength);\r\n    }\r\n\r\n    // static fromMap(map : Map<string, ComplexNumber>, bitLength : number) : QuantumState {\r\n    //     return new QuantumState(map, bitLength);\r\n    // }\r\n\r\n    static create(bitLength : number) : QuantumState {\r\n        return new QuantumState(new Map(), bitLength);\r\n    }\r\n\r\n    static zero(bitLength : number) : QuantumState {\r\n        const newState = QuantumState.create(bitLength);\r\n        newState.increment(toBinaryString(0, bitLength), ComplexNumber.ONE);\r\n\r\n        return newState;\r\n    }\r\n\r\n    static unique(bitLength : number, string : string) : QuantumState {\r\n        const newState = QuantumState.create(bitLength);\r\n        newState.increment(string, ComplexNumber.ONE);\r\n        return newState;\r\n    }\r\n\r\n    toVector() : Vector {\r\n        const result : ComplexNumber[] = Array(2 ** this.bitLength).fill(ComplexNumber.ZERO);\r\n\r\n        for (const [index, value] of this._map.entries()) {\r\n            result[toDecimal(index)] = value;\r\n        }\r\n\r\n        return Vector.fromComplexArray(result);\r\n    }\r\n\r\n    // iterator\r\n    entries() {\r\n        return this._map.entries();\r\n    }\r\n\r\n    keys() {\r\n        return this._map.keys();\r\n    }\r\n\r\n    values() {\r\n        return this._map.values();\r\n    }\r\n\r\n    transform(\r\n        callbackFn: (value: ComplexNumber, key : string, map: Map<string, ComplexNumber>, newState: QuantumState) => void,\r\n        bitLength : number = this.bitLength\r\n    ) {\r\n        const newState = QuantumState.create(bitLength);\r\n\r\n        for (const [key, value] of this._map) {\r\n            callbackFn(value, key, this._map, newState);\r\n        }\r\n\r\n        return newState;\r\n    }\r\n\r\n    split(predicate : (value: ComplexNumber, key: string, map: Map<string, ComplexNumber>) => boolean) : [QuantumState, QuantumState] {\r\n        const acceptedState = QuantumState.create(this.bitLength);\r\n        const rejectedState = QuantumState.create(this.bitLength);\r\n\r\n        for (const [key, value] of this._map) {\r\n            if (predicate(value, key, this._map)) \r\n                acceptedState.increment(key, value.clone());\r\n            else \r\n                rejectedState.increment(key, value.clone());\r\n        }\r\n\r\n        return [acceptedState, rejectedState];\r\n    }\r\n\r\n    combine(other : QuantumState) : QuantumState {\r\n        const newState = QuantumState.create(this.bitLength);\r\n\r\n        for (const [key, value] of this._map) {\r\n            newState.increment(key, value.clone());\r\n        }\r\n\r\n        for (const [key, value] of other._map) {\r\n            newState.increment(key, value.clone());\r\n        }\r\n\r\n        return newState;\r\n    }\r\n\r\n    isFitLength(wireLength : number) : boolean {\r\n        return this.bitLength === wireLength;\r\n    }\r\n\r\n    // state manipulation\r\n\r\n    /**\r\n     * \r\n     * @param index, index.length = bitLength, must be a binary string\r\n     * @returns Complex Number\r\n     */\r\n    get(index : string) : ComplexNumber {\r\n        return this._map.get(index) ?? ComplexNumber.ZERO;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @param index, index.length = bitLength, must be a binary string\r\n     * @returns Complex Number\r\n     */\r\n    set(index : string, value : ComplexNumber) : void {\r\n        if (value.isZero()) {\r\n            this._map.delete(index);\r\n        } else {\r\n            this._map.set(index, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param index, index.length = bitLength, must be a binary string\r\n     * @returns Complex Number\r\n     */\r\n    increment(index: string, value : ComplexNumber) : void {\r\n        this.set(index, this.get(index).add(value))\r\n    }\r\n\r\n    // measure\r\n    measure() {\r\n        let probabilityList : [string, number][] = [];\r\n        \r\n        for (const [key, value] of this._map) {\r\n            probabilityList.push([key, value.squaredR]);\r\n        }\r\n        \r\n        // check if it's normalized\r\n        let sum = probabilityList.reduce((acc, [_, value]) => acc + value, 0);\r\n        \r\n        if (Math.abs(sum - 1) > 0.00001) {\r\n            throw new Error('Probability list is not normalized');\r\n        }\r\n\r\n        \r\n        // pick a random number\r\n        const randomNumber = Math.random();\r\n        let currentValue = 0;\r\n        \r\n        for (const [key, value] of probabilityList) {\r\n            currentValue += value;\r\n            if (randomNumber < currentValue) {\r\n                return key;\r\n            }\r\n        }\r\n\r\n        throw new Error(\"IMPOSSIBLE TO REACH HERE\")\r\n    }\r\n\r\n    // string functions\r\n\r\n    toString(type : PrintType = PrintType.Integer) {\r\n        let logString = \"\";\r\n        \r\n        for (const [key, value] of this._map) {\r\n            logString += (type === PrintType.Binary) \r\n                ? (` ${value.toString()} |${key}>`)\r\n                : (` ${value.toString()} |${toDecimal(key)}>`);\r\n        }\r\n        \r\n        return logString;        \r\n    }\r\n    \r\n    toStringSorted(type : PrintType = PrintType.Integer) {\r\n        let logString = \"\";\r\n\r\n        if (type === PrintType.Binary) {\r\n            const data = [...this._map.entries()].map<[string, ComplexNumber]>(([key, value]) => [key, value]);\r\n            data.sort();\r\n\r\n            for (const [key, value] of data) {\r\n                logString += (` ${value.toString()} |${key}>`)\r\n            }\r\n        } else {\r\n            const data = [...this._map.entries()].map<[number, ComplexNumber]>(([key, value]) => [toDecimal(key), value]);\r\n            data.sort((a, b) => a[0] - b[0]);\r\n            \r\n            for (const [key, value] of data) {\r\n                logString += (` ${value.toString()} |${key}>`);\r\n            }\r\n        }\r\n        return logString;\r\n    }\r\n    \r\n    toStringColorful(type : PrintType = PrintType.Integer) {\r\n        const colorCSSList = Array(this._map.size * 2).fill(0).map(\r\n            (_, i) => i % 2 === 0 ? \"color : green\" : \"font-weight : bold; color : red\"\r\n        );\r\n        let logString = \"\";\r\n        \r\n        for (const [key, value] of this._map) {\r\n            logString += (type === PrintType.Binary) \r\n                ? (`%c ${value.toString()} %c|${key}>`)\r\n                : (`%c ${value.toString()} %c|${toDecimal(key)}>`);\r\n        }\r\n\r\n        return [logString, colorCSSList];\r\n    }\r\n\r\n    toStringColorfulSorted(type : PrintType = PrintType.Integer) {\r\n        const colorCSSList = Array(this._map.size * 2).fill(0).map(\r\n            (_, i) => i % 2 === 0 ? \"color : green\" : \"font-weight : bold; color : red\"\r\n        );\r\n        let logString = \"\";\r\n\r\n        if (type === PrintType.Binary) {\r\n            const data = [...this._map.entries()].map<[string, ComplexNumber]>(([key, value]) => [key, value]);\r\n            data.sort();\r\n\r\n            for (const [key, value] of data) {\r\n                logString += (`%c ${value.toString()} %c|${key}>`)\r\n            }\r\n        } else {\r\n            const data = [...this._map.entries()].map<[number, ComplexNumber]>(([key, value]) => [toDecimal(key), value]);\r\n            data.sort((a, b) => a[0] - b[0]);\r\n            \r\n            for (const [key, value] of data) {\r\n                logString += (`%c ${value.toString()} %c|${key}>`);\r\n            }\r\n        }\r\n\r\n        return [logString, colorCSSList];\r\n    }\r\n\r\n    printStringColorful(type : PrintType = PrintType.Integer) {\r\n        const [logString, colorCSSList] = this.toStringColorful(type);\r\n        console.log(logString, ...colorCSSList);\r\n    }\r\n\r\n    printStringColorfulSorted(type : PrintType = PrintType.Integer) {\r\n        const [logString, colorCSSList] = this.toStringColorfulSorted(type);\r\n        console.log(logString, ...colorCSSList);\r\n    }\r\n} \r\n\r\n\r\n","import ComplexNumber from \"../util/ComplexNumber\";\r\nimport { PrintType } from \"./QuantumState\";\r\nimport { toBinaryString } from \"../util/StringHelper\";\r\n\r\nexport default class QuantumVectorState {\r\n    private _map : Map<number, Readonly<ComplexNumber>>;\r\n    readonly bitLength : number; \r\n\r\n    private constructor(map : Map<number, ComplexNumber>, bitLength : number) {\r\n        this._map = map;\r\n        this.bitLength = bitLength;\r\n    }\r\n\r\n    static create(bitLength : number) : QuantumVectorState {\r\n        return new QuantumVectorState(new Map(), bitLength);\r\n    }\r\n\r\n    static zero(bitLength : number) : QuantumVectorState {\r\n        const newState = QuantumVectorState.create(bitLength);\r\n        newState.increment(0, ComplexNumber.ONE);\r\n\r\n        return newState;\r\n    }\r\n\r\n    static unique(bitLength : number, index : number) : QuantumVectorState {\r\n        const newState = QuantumVectorState.create(bitLength);\r\n        newState.increment(index, ComplexNumber.ONE);\r\n\r\n        return newState;\r\n    }\r\n\r\n    isFitLength(length : number) : boolean {\r\n        return this.bitLength === length;\r\n    }\r\n\r\n    get(index : number) : Readonly<ComplexNumber> {\r\n        return this._map.get(index) ?? ComplexNumber.ZERO;\r\n    }\r\n\r\n    set(index : number, value : Readonly<ComplexNumber>) : void {\r\n        // console.log(\"called\")\r\n        if (value.isZero()) {\r\n            this._map.delete(index);\r\n        } else {\r\n            this._map.set(index, value);\r\n        }\r\n    }\r\n\r\n    increment(index : number, value : Readonly<ComplexNumber>) : void {\r\n        this.set(index, this.get(index).add(value));\r\n    }\r\n\r\n    entries() : IterableIterator<[number, ComplexNumber]> {\r\n        return this._map.entries();\r\n    }\r\n\r\n    transform(callbackFn : (value: ComplexNumber, index: number, map : Map<number, ComplexNumber>, newState : QuantumVectorState) => void) : QuantumVectorState {\r\n        const newState = QuantumVectorState.create(this.bitLength);\r\n\r\n        for (const [index, value] of this._map) {\r\n            callbackFn(value, index, this._map, newState);\r\n        }\r\n\r\n        return newState;\r\n    }\r\n\r\n    split(predicate : (value: ComplexNumber, key: number, map: Map<number, ComplexNumber>) => boolean) : [QuantumVectorState, QuantumVectorState] {\r\n        const acceptedState = QuantumVectorState.create(this.bitLength);\r\n        const rejectedState = QuantumVectorState.create(this.bitLength);\r\n\r\n        for (const [key, value] of this._map) {\r\n            if (predicate(value, key, this._map)) \r\n                acceptedState.increment(key, value.clone());\r\n            else \r\n                rejectedState.increment(key, value.clone());\r\n        }\r\n\r\n        return [acceptedState, rejectedState];\r\n    }\r\n\r\n    combine(other : QuantumVectorState) : QuantumVectorState {\r\n        const newState = QuantumVectorState.create(this.bitLength);\r\n\r\n        for (const [key, value] of this._map) {\r\n            newState.increment(key, value.clone());\r\n        }\r\n\r\n        for (const [key, value] of other._map) {\r\n            newState.increment(key, value.clone());\r\n        }\r\n\r\n        return newState;\r\n    }\r\n\r\n\r\n    // measure\r\n    measure() {\r\n        let probabilityList : [number, number][] = [];\r\n\r\n        for (const [index, value] of this._map) {\r\n            probabilityList.push([index, value.squaredR]);\r\n        }\r\n\r\n        // check if it's normalized\r\n        let sum = probabilityList.reduce((acc, [_, value]) => acc + value, 0);\r\n\r\n        if (Math.abs(sum - 1) > 0.00001) {\r\n            throw new Error('Probability list is not normalized');\r\n        }\r\n\r\n        // pick a random number\r\n        const randomNumber = Math.random();\r\n        let currentValue = 0;\r\n\r\n        for (const [index, value] of probabilityList) {\r\n            currentValue += value;\r\n            if (randomNumber < currentValue) {\r\n                return index;\r\n            }\r\n        }\r\n\r\n        throw new Error('SHOULD NEVER HAPPEN');\r\n    }\r\n\r\n    // string functions\r\n\r\n    toString(type : PrintType = PrintType.Integer) {\r\n        let logString = \"\";\r\n        \r\n        for (const [key, value] of this._map) {\r\n            logString += (type === PrintType.Binary) \r\n                ? (`${value.toString()} |${toBinaryString(key, this.bitLength)}> \\n`)\r\n                : (`${value.toString()} |${key}> \\n`);\r\n        }\r\n        \r\n        return logString;        \r\n    }\r\n\r\n    toDataSorted(type : PrintType = PrintType.Integer) {\r\n        const data =  [...this._map.entries()].map(([index, value]) => [\r\n            type === PrintType.Binary ? toBinaryString(index, this.bitLength) : index,\r\n            value\r\n        ]) as [string | number, ComplexNumber][]\r\n\r\n        data.sort((a, b) => {\r\n            return a[0] < b[0] ? -1 : 1;\r\n        })\r\n\r\n        return data;\r\n    }\r\n    \r\n    toStringSorted(type : PrintType = PrintType.Integer) {\r\n        let logString = \"\";\r\n\r\n\r\n        const data = [...this._map.entries()].map(([index, value]) => [\r\n            type === PrintType.Binary ? toBinaryString(index, this.bitLength) : index,\r\n            value\r\n        ]) as [string | number, ComplexNumber][]\r\n\r\n\r\n        data.sort((a, b) => {\r\n            return a[0] < b[0] ? -1 : 1;\r\n        })\r\n\r\n        for (const [index, value] of data) {\r\n            logString += `${value.toString()} |${index}> \\n`;\r\n        }\r\n\r\n        return logString;\r\n    }\r\n    \r\n    toStringColorful(type : PrintType = PrintType.Integer) {\r\n        const colorCSSList = Array(this._map.size * 2).fill(0).map(\r\n            (_, i) => i % 2 === 0 ? \"color : green\" : \"font-weight : bold; color : red\"\r\n        ) as string[];\r\n        colorCSSList.push(\"color : black\");\r\n\r\n        let logString = \"\";\r\n        \r\n        for (const [key, value] of this._map) {\r\n            logString += (type === PrintType.Binary) \r\n                ? (`%c ${value.toString()} %c |${toBinaryString(key, this.bitLength)}> \\n`)\r\n                : (`%c ${value.toString()} %c |${key}> \\n`);\r\n        }\r\n\r\n        logString += \"%c\";\r\n\r\n        return [logString, colorCSSList];\r\n    }\r\n\r\n    toStringColorfulSorted(type : PrintType = PrintType.Integer) {\r\n        const colorCSSList = Array(this._map.size * 2).fill(0).map(\r\n            (_, i) => i % 2 === 0 ? \"color : green\" : \"font-weight : bold; color : red\"\r\n        ) as string[];\r\n        colorCSSList.push(\"color : black\");\r\n\r\n        let logString = \"\"\r\n\r\n\r\n        const data = [...this._map.entries()].map(([index, value]) => [\r\n            type === PrintType.Binary ? toBinaryString(index, this.bitLength) : index,\r\n            value\r\n        ]) as [string | number, ComplexNumber][]\r\n\r\n\r\n        data.sort((a, b) => {\r\n            return a[0] < b[0] ? -1 : 1;\r\n        })\r\n\r\n        for (const [index, value] of data) {\r\n            logString += `%c ${value.toString()} %c |${index}> \\n`;\r\n        }\r\n\r\n        return [logString, colorCSSList];\r\n    }\r\n\r\n    printStringColorful(type : PrintType = PrintType.Integer) {\r\n        const [logString, colorCSSList] = this.toStringColorful(type);\r\n        console.log(logString, ...colorCSSList.slice(0, -1));\r\n    }\r\n\r\n    printStringColorfulSorted(type : PrintType = PrintType.Integer) {\r\n        const [logString, colorCSSList] = this.toStringColorfulSorted(type);\r\n        console.log(logString, ...colorCSSList.slice(0, -1));\r\n    }\r\n}","import { QuantumCircuit } from \"./QuantumCircuit\";\r\nimport { AtomizeStrategy, AtomizeType } from \"./QuantumGate/Atomizer\";\r\nimport { GeneratorFunctionType, GeneratorMatrixFunctionSubType, GeneratorMatrixInstanceType, GeneratorMatrixType, GeneratorType } from \"./QuantumGate/Generator\";\r\nimport { GeneratorMatrixMap, isGeneratorMatrixFunctionSubType } from \"./QuantumGate/GeneratorMatrixMap\";\r\nimport { QuantumGate } from \"./QuantumGate/QuantumGate\";\r\n\r\nexport class QuantumWire {\r\n    readonly wireLength : number;\r\n    readonly gateArray : QuantumGate[];\r\n\r\n    private constructor(wireLength : number) {\r\n        this.wireLength = wireLength;\r\n        this.gateArray = [];\r\n    }\r\n\r\n    static create(wireLength : number) : QuantumWire {\r\n        return new QuantumWire(wireLength);\r\n    }\r\n\r\n    addGate(gate : QuantumGate) {\r\n        this.gateArray.push(gate);\r\n    }\r\n\r\n    generate<T extends GeneratorType>(atomizeStrategy : AtomizeType , generatorType : T) : QuantumCircuit<T> {\r\n        const gateArray = this.gateArray.map((gate) => atomizeStrategy(gate, generatorType)).flat();\r\n\r\n        // this gateArray are guaranteed to get the function in generatorType\r\n        const functionArray = gateArray.map((gate) => gate.get(generatorType) as GeneratorFunctionType<T>);\r\n\r\n\r\n        const matrixArray = isGeneratorMatrixFunctionSubType(generatorType) \r\n            ? gateArray.map((gate) => gate.getMatrix(generatorType) as GeneratorMatrixInstanceType<typeof generatorType>)\r\n            : [];\r\n\r\n\r\n        return QuantumCircuit.create<T>(\r\n            gateArray, functionArray, \r\n            matrixArray, \r\n            this.wireLength, generatorType\r\n        );\r\n    }\r\n}","import Vector from \"../util/Vector\";\r\nimport { GateConstructorMap } from \"./QuantumGate/GateConstructorMap\";\r\nimport { GeneratorFunctionType, GeneratorInputType, GeneratorMatrixFunctionSubType, GeneratorMatrixInstanceType, GeneratorType } from \"./QuantumGate/Generator\";\r\nimport { GeneratorMatrixCtor, GeneratorMatrixMap, isGeneratorMatrixFunctionSubType } from \"./QuantumGate/GeneratorMatrixMap\";\r\nimport { QuantumGate } from \"./QuantumGate/QuantumGate\";\r\n\r\n\r\nexport class QuantumCircuit<T extends GeneratorType> {\r\n    readonly generatorType : T;\r\n    readonly matrixArray : GeneratorMatrixInstanceType<GeneratorMatrixFunctionSubType>[];\r\n    readonly gateArray : QuantumGate[];\r\n    readonly functionArray : GeneratorFunctionType<T>[];\r\n    readonly wireLength : number;\r\n\r\n    private constructor(\r\n        gateArray : QuantumGate[], \r\n        functionArray : GeneratorFunctionType<T>[], \r\n        matrixArray  : GeneratorMatrixInstanceType<GeneratorMatrixFunctionSubType>[],\r\n        wireLength : number, generatorType : T\r\n    ) {\r\n        this.gateArray = gateArray;\r\n        this.functionArray = functionArray;\r\n        this.matrixArray = matrixArray;\r\n        this.wireLength = wireLength;\r\n        this.generatorType = generatorType;\r\n    }\r\n\r\n    static create<T extends GeneratorType>(\r\n        gateArray : QuantumGate[], \r\n        functionArray : GeneratorFunctionType<T>[], \r\n        matrixArray  : GeneratorMatrixInstanceType<GeneratorMatrixFunctionSubType>[],\r\n        wireLength : number, generatorType : T\r\n    ) : QuantumCircuit<T> {\r\n        return new QuantumCircuit(gateArray, functionArray, matrixArray ,wireLength, generatorType);\r\n    }\r\n\r\n    execute(state : GeneratorInputType<T>) {\r\n        // @ts-ignore\r\n        return this.functionArray.reduce((state, fn, index) => {\r\n            // @ts-ignore\r\n            return fn(state);\r\n            // console.log(this.gateArray[index]);\r\n            // console.log(nextState);\r\n            // // nextState.printStringColorfulSorted();\r\n            // return nextState\r\n        }, state);\r\n    }\r\n\r\n    executeMatrix(state : Vector) : Vector {\r\n        const matrix = this.getMatrix();\r\n\r\n        if (matrix === null) {\r\n            throw new Error(\"Current Quantum Circuit Have No Matrix Description\");\r\n        }\r\n\r\n        return matrix.vectorMultiply(state);\r\n    }\r\n\r\n    getMatrix() : GeneratorMatrixInstanceType<GeneratorMatrixFunctionSubType> | null {\r\n        if (isGeneratorMatrixFunctionSubType(this.generatorType)) {\r\n            return this.matrixArray.reduce((acc, matrix) => matrix.matrixMultiply(acc), GeneratorMatrixCtor(this.generatorType).identity(2 ** this.wireLength));\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\n"],"names":[],"version":3,"file":"index.fa23dcb8.js.map","sourceRoot":"/__parcel_source_root/"}